<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Imlauer</title>
    <link>https://imlauera.github.io/tags/programming/</link>
    <description>Recent content in Programming on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 18 Jan 2025 08:41:44 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enviar simple GET request en C</title>
      <link>https://imlauera.github.io/send_http_request_c/</link>
      <pubDate>Sat, 18 Jan 2025 08:41:44 -0300</pubDate>
      <guid>https://imlauera.github.io/send_http_request_c/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;string.h&amp;gt; int main(int argc, char *argv[]){ if (argc != 2){ fprintf(stderr, &amp;#34;Usage: %s IP-Address\n&amp;#34;, argv[0]); return EXIT_FAILURE; } struct sockaddr_in server_address; int s = socket(AF_INET, SOCK_STREAM, 0); if (s &amp;lt; 0){ fprintf(stderr,&amp;#34;Error: socket.\n&amp;#34;); return EXIT_FAILURE; } memset(&amp;amp;server_address, &amp;#39;0&amp;#39;, sizeof(server_address)); server_address.sin_family = AF_INET; server_address.sin_port = htons(80); if (inet_pton(AF_INET, argv[1], &amp;amp;server_address.sin_addr) &amp;lt;= 0){ fprintf(stderr,&amp;#34;Error: inet_pton.\n&amp;#34;); return EXIT_FAILURE; } if ( connect(s, (struct sockaddr *)&amp;amp;server_address, sizeof(server_address)) &amp;lt; 0 ){ fprintf(stderr,&amp;#34;Error: Connect failed.</description>
    </item>
  </channel>
</rss>
