<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overflow on Imlauer</title>
    <link>https://imlauera.github.io/tags/overflow/</link>
    <description>Recent content in Overflow on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Tue, 20 Aug 2024 23:49:30 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/overflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Buffer overflow 7 (Ricardo navarja reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_7/</link>
      <pubDate>Tue, 20 Aug 2024 23:49:30 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_7/</guid>
      <description>Este es el código que me generó el IDA con mis modificaciones:&#xA;int __cdecl check(char *Stream) { char savedregs; // [esp+0h] [ebp+0h] sprintf(Stream + 220, &amp;#34;Bieeeeeeeeeeeeeeeeeeeen ? con %s&amp;#34;, Stream + 4); if ( *(Stream + 52) != &amp;#39;E&amp;#39; ) { printf(&amp;#34;Mal camino \n&amp;#34;, savedregs); exit(1); } if ( Stream[216] != 0xD ) *(Stream + 54) = 2; printf(&amp;#34;valor= %x\n&amp;#34;, Stream[216]); printf(&amp;#34;number= %x\n&amp;#34;, Stream[204]); if ( *(Stream + 53) == &amp;#39;F&amp;#39; ) printf(&amp;#34;Aprobaste level 7&amp;#34;, savedregs); else printf(&amp;#34;Que pasa, %x \n&amp;#34;, Stream[216] + Stream[204]); return 0; } int main(int argc, const char **argv) { FILE *Stream; // [esp+0h] [ebp-1A4h] BYREF char Buffer[200]; // [esp+4h] [ebp-1A0h] BYREF int v6; // [esp+CCh] [ebp-D8h] int v7; // [esp+D0h] [ebp-D4h] int v8; // [esp+D4h] [ebp-D0h] char Destination[200]; // [esp+DCh] [ebp-C8h] BYREF v6 = 1; v8 = 1; v7 = 69; memset(Buffer, 0, sizeof(Buffer)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Buffer overflow exámen 5 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/bufferoverflow_5/</link>
      <pubDate>Wed, 07 Aug 2024 18:31:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_5/</guid>
      <description>Lo que el decompilador de IDA me generó con algunas modificaciones.&#xA;int check(char *buffer) { // Copia el buffer a partir de la posición 216 al comienzo del buffer a partir de la posición 4. // 11 caracteres insertando al buffer // 4+4+11 = 19 char savedregs; // 199 -4 + 11 sprintf(&amp;amp;buffer[4], &amp;#34;Bien ? con %s&amp;#34;, buffer + 216); // 52-19 = 33 // La posición 33 del archivo example.</description>
    </item>
    <item>
      <title>Explotando buffer overflow provocado por copiar un buffer de 300 a uno de 200</title>
      <link>https://imlauera.github.io/post/bufferoverflow_3/</link>
      <pubDate>Wed, 07 Aug 2024 07:24:45 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_3/</guid>
      <description>Lo único que hacemos es pisar la variable que está abajo del buffer de 200 porque copia el contenido del buffer de 200 a un buffer de 300. Le ponemos de valor 0 a la variable que está debajo del buffer de 200 porque hace esta comparación cmp ptr [eax+0C8h],0 para ganar el reto. En donde 0C8h es un offset que hace referencia a una variable que está dentro de estructura en donde está también declarado el buffer.</description>
    </item>
    <item>
      <title>Explotando el típico buffer overflow copia un buffer mas grande a uno más chico.</title>
      <link>https://imlauera.github.io/post/bufferoverflow_strcpy/</link>
      <pubDate>Wed, 07 Aug 2024 06:03:47 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_strcpy/</guid>
      <description>Lee 210 de un archivo en el 1er buffer, pero en el 2do buffer está el overflow porque Dst(Destination) es un buffer de 200 bytes. Le pasa un puntero, o sea la dirección del buffer Dst a la función check.&#xA;Si en una función se pasa un puntero y a partir de esa dirección se le suma un offset y se encuentran valores para comparar o distintos campos, sabemos que ahí hay una estructura, podría haber una estructura que abarque todas las variables de la primera función.</description>
    </item>
  </channel>
</rss>
