<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ida on Imlauer</title>
    <link>https://imlauera.github.io/tags/ida/</link>
    <description>Recent content in Ida on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Fri, 01 Nov 2024 18:08:02 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/ida/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiple choice: 10 - Introducción al reversing IDA PRO</title>
      <link>https://imlauera.github.io/ida_questions/</link>
      <pubDate>Fri, 01 Nov 2024 18:08:02 -0300</pubDate>
      <guid>https://imlauera.github.io/ida_questions/</guid>
      <description>--- primary_color: blue secondary_color: lightgray text_color: black shuffle_questions: false shuffle_answers: true --- ### Qué es un LOADER? &gt; Un desensamblador estático y con grandes posibilidades de interactividad para el reversing. - [x] Son aparatos eléctricos diseñados para facilitar tareas en el hogar, como cocinar, limpiar y conservar alimentos. Ejemplos incluyen frigoríficos, hornos y lavadoras - [ ] Un aparato que solo funciona con baterías. - [ ] Un tipo de mueble utilizado en la cocina.</description>
    </item>
    <item>
      <title>Keygen si puedes</title>
      <link>https://imlauera.github.io/post/keygen/</link>
      <pubDate>Mon, 09 Sep 2024 06:41:05 -0300</pubDate>
      <guid>https://imlauera.github.io/post/keygen/</guid>
      <description>El keygen se encuentra en: https://drive.google.com/file/d/1QRIk3zBGGXH54nSZorX3jnuNmURCHw6K/view?pli=1&#xA;El código que me generó el ida es:&#xA;#include &amp;lt;windows.h&amp;gt; #include &amp;lt;defs.h&amp;gt; #include &amp;lt;stdarg.h&amp;gt; //------------------------------------------------------------------------- // Function declarations void __fastcall _mingw_invalidParameterHandler(const wchar_t *expression, const wchar_t *function, const wchar_t *file, unsigned int line, uintptr_t pReserved); int __cdecl pre_c_init(); void __cdecl pre_cpp_init(); // int __cdecl _tmainCRTStartup(); // int __cdecl WinMainCRTStartup(); int __cdecl mainCRTStartup(); char *__fastcall generaLetras(int a1, char *a2); __int64 __fastcall generaNumero(char *a1); // idb int __fastcall generaSerial(char *a1, char *a2); int __fastcall checkSerial(char *a1, char *a2); INT_PTR __fastcall DialogProc(HWND a1, int a2, unsigned __int16 a3); int __stdcall WinMain(HINSTANCE hInst, HINSTANCE hPreInst, LPSTR lpszCmdLine, int nCmdShow); void *__fastcall decode_pointer(void *codedptr); void *__fastcall encode_pointer(void *ptr); int __cdecl setargv(); void __fastcall _mingw_raise_matherr(int typ, const char *name, double a3, double a1, double rslt); void __fastcall _mingw_setusermatherr(int (*f)(_exception *)); int __fastcall matherr(_exception *pexcept); void _report_error(const char *msg, .</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Examen 10 (Ejecutar calculadora no es un bufferoverflow)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_10/</link>
      <pubDate>Mon, 26 Aug 2024 15:52:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_10/</guid>
      <description>No me funcionaba con wine en linux porque verifica si argc == 2 y si ejecutás wine EXAMEN_10.exe 49 el argc vale 3, así que tuve que ejecutar el exploit en windows. En linux en vez de usar calc uso cmd porque calc no está disponible a nivel global.&#xA;El código que me generó el ida con algunas modificaciones&#xA;_DWORD *__thiscall this_106(_DWORD *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Ricardo Narvaja Reversing: Buffer overflow examen 9</title>
      <link>https://imlauera.github.io/post/buffer_overflow_9/</link>
      <pubDate>Sat, 24 Aug 2024 05:09:01 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_9/</guid>
      <description>Este reto usa vfprintf #include &amp;lt;stdarg.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; void vout(FILE *stream, char *fmt, ...); char fmt1 [] = &amp;#34;%s %s %s\n&amp;#34;; int main(void) { FILE *stream; stream = fopen(&amp;#34;myfile.dat&amp;#34;, &amp;#34;w&amp;#34;); vout(stream, fmt1, &amp;#34;Sat&amp;#34;, &amp;#34;Sun&amp;#34;, &amp;#34;Mon&amp;#34;); } void vout(FILE *stream, char *fmt, ...) { va_list arg_ptr; va_start(arg_ptr, fmt); vfprintf(stream, fmt, arg_ptr); va_end(arg_ptr); } printf que me decompilo el ida:&#xA;int printf(char *Format, ...) { FILE *v1; // eax va_list va; // [esp+14h] [ebp+Ch] BYREF va_start(va, Format); sub_401000(); v1 = _acrt_iob_func(1u); return vfprintf(v1, Format, 0, va); } Esto me generó el IDA con algunos retoques: // Overfloodea cuando cargo el caracter 169 char *this_106(char *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Buffer overflow 7 (Ricardo navarja reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_7/</link>
      <pubDate>Tue, 20 Aug 2024 23:49:30 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_7/</guid>
      <description>Este es el código que me generó el IDA con mis modificaciones:&#xA;int __cdecl check(char *Stream) { char savedregs; // [esp+0h] [ebp+0h] sprintf(Stream + 220, &amp;#34;Bieeeeeeeeeeeeeeeeeeeen ? con %s&amp;#34;, Stream + 4); if ( *(Stream + 52) != &amp;#39;E&amp;#39; ) { printf(&amp;#34;Mal camino \n&amp;#34;, savedregs); exit(1); } if ( Stream[216] != 0xD ) *(Stream + 54) = 2; printf(&amp;#34;valor= %x\n&amp;#34;, Stream[216]); printf(&amp;#34;number= %x\n&amp;#34;, Stream[204]); if ( *(Stream + 53) == &amp;#39;F&amp;#39; ) printf(&amp;#34;Aprobaste level 7&amp;#34;, savedregs); else printf(&amp;#34;Que pasa, %x \n&amp;#34;, Stream[216] + Stream[204]); return 0; } int main(int argc, const char **argv) { FILE *Stream; // [esp+0h] [ebp-1A4h] BYREF char Buffer[200]; // [esp+4h] [ebp-1A0h] BYREF int v6; // [esp+CCh] [ebp-D8h] int v7; // [esp+D0h] [ebp-D4h] int v8; // [esp+D4h] [ebp-D0h] char Destination[200]; // [esp+DCh] [ebp-C8h] BYREF v6 = 1; v8 = 1; v7 = 69; memset(Buffer, 0, sizeof(Buffer)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Buffer Overflow Examen 6 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_6/</link>
      <pubDate>Tue, 20 Aug 2024 18:04:05 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_6/</guid>
      <description>El IDA me lo decompila a :&#xA;void *check(void *this) { this[102] = 0; this[104] = &amp;#34;Aprobaste level 6&amp;#34;; this[105] = &amp;#34;A practicar y repasar mas ...&amp;#34;; return this; } int check3(char *Destination) { // Concatenación. strcat(Destination, Destination[105]); if ( strlen(Destination) == 229 ) { if ( Destination[4] == 0x49 ) Destination[50] = 1; if ( Destination[5] != 0x50 ) Destination[50] = 0; } return 0; } int check2(char *Destination) { check3(Destination); if ( Destination[50] == 1 ) printf(&amp;#34;%s\n&amp;#34;, Destination[104]); else printf(&amp;#34;%s\n&amp;#34;, Destination[105]); return 0; } int __cdecl main(int argc, const char **argv, const char **envp) { char Destination[200]; // [esp+0h] [ebp-1A8h] BYREF int v5; // [esp+C8h] [ebp-E0h] BYREF FILE *Stream; // [esp+CCh] [ebp-DCh] char Buffer[200]; // [esp+D0h] [ebp-D8h] BYREF int *puntero_a_v5; // [esp+19Ch] [ebp-Ch] check(Destination); v5 = 0; puntero_a_v5 = &amp;amp;v5; memset(Buffer, 0, 200*sizeof(char)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Buffer overflow exámen 5 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/bufferoverflow_5/</link>
      <pubDate>Wed, 07 Aug 2024 18:31:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_5/</guid>
      <description>Lo que el decompilador de IDA me generó con algunas modificaciones.&#xA;int check(char *buffer) { // Copia el buffer a partir de la posición 216 al comienzo del buffer a partir de la posición 4. // 11 caracteres insertando al buffer // 4+4+11 = 19 char savedregs; // 199 -4 + 11 sprintf(&amp;amp;buffer[4], &amp;#34;Bien ? con %s&amp;#34;, buffer + 216); // 52-19 = 33 // La posición 33 del archivo example.</description>
    </item>
    <item>
      <title>Explotando buffer overflow provocado por copiar un buffer de 300 a uno de 200</title>
      <link>https://imlauera.github.io/post/bufferoverflow_3/</link>
      <pubDate>Wed, 07 Aug 2024 07:24:45 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_3/</guid>
      <description>Lo único que hacemos es pisar la variable que está abajo del buffer de 200 porque copia el contenido del buffer de 200 a un buffer de 300. Le ponemos de valor 0 a la variable que está debajo del buffer de 200 porque hace esta comparación cmp ptr [eax+0C8h],0 para ganar el reto. En donde 0C8h es un offset que hace referencia a una variable que está dentro de estructura en donde está también declarado el buffer.</description>
    </item>
    <item>
      <title>Explotando un buffer overflow provocado al querer restringir/comparar el tamaño del buffer sin considerar el signo.</title>
      <link>https://imlauera.github.io/post/buffer_overflow_curso1/</link>
      <pubDate>Tue, 06 Aug 2024 16:59:15 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_curso1/</guid>
      <description>Archivo del examen: EXAMEN_LEVEL_1b.7z EXAMENES LA CONTRASEÑA es A&#xA;O descargalo desde acá: http://ricardonarvaja.info/WEB/IDA%20DESDE%20CERO/EXAMENES/EXAMENES%20Password=a.7z&#xA;La comparación se realizó con jl. Luego pisamos la variable numero_random con 44434241 que luego se xorea con la variable numero_2 que es 0, y eso hará que pasemos el nivel.&#xA;Inicio Concepto fundamental: Qué es un offset?&#xA;En informática, un offset dentro de un array u otra estructura de datos es un entero que indica la distancia (desplazamiento) desde el inicio del objeto hasta un punto o elemento dado, presumiblemente dentro del mismo objeto.</description>
    </item>
    <item>
      <title>Reversing: IDA Free</title>
      <link>https://imlauera.github.io/post/reversing_ida_pro_free/</link>
      <pubDate>Thu, 27 Jun 2024 21:22:58 -0300</pubDate>
      <guid>https://imlauera.github.io/post/reversing_ida_pro_free/</guid>
      <description>Lo más importante es entender C,ASM y el concepto básico de un buffer overflow.&#xA;Ayer estaba jugando un poco con IDA PRO aprendiendo un poco de ASM. https://hex-rays.com/ida-free/&#xA;Analicemos el siguiente código&#xA;C: int main(){ return -1; } Este es el código que nos genera el IDA:&#xA;ASM: ; Attributes: bp-based frame ; int __cdecl main(int argc, const char **argv, const char **envp) public main main proc near ; __unwind { push rbp ; Almacenar el registro RBP en la pila mov rbp, rsp ; Asigna a RBP el valor del registro apuntador RSP mov eax, 0FFFFFFFFh ; Mueve el -1 (escrito hexadecimal) al registro acumulador (eax).</description>
    </item>
  </channel>
</rss>
