<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reversing on Imlauer</title>
    <link>https://imlauera.github.io/tags/reversing/</link>
    <description>Recent content in Reversing on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Wed, 22 Jan 2025 06:15:44 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/reversing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reversing: Diferentes formas de desarmar un binario</title>
      <link>https://imlauera.github.io/como_desamblar_un_binario/</link>
      <pubDate>Wed, 22 Jan 2025 06:15:44 -0300</pubDate>
      <guid>https://imlauera.github.io/como_desamblar_un_binario/</guid>
      <description>objdump -drwC -Mintel -d p Podes fijar un alias en .bashrc o .config/fish/config.fish:&#xA;disas=&amp;#39;objdump -drwC -Mintel&amp;#39; (-w is no line-wrapping, -c is demangle, -r prints relocations in object files.) Otras formas:&#xA;llvm-objdump -drwC -Mintel ndisasm gdb -q ./a.out disassemble main disassemble /m main Agner Fog&amp;rsquo;s disassembler: objconv Para generar archivo ASM usando sintaxis intel: gcc p.c -c -S -masm=intel Otras alternativas: IDA, Ghidra, radare.</description>
    </item>
    <item>
      <title>STRING FACIL reversing</title>
      <link>https://imlauera.github.io/post/string_facil_reversing/</link>
      <pubDate>Fri, 27 Sep 2024 03:07:18 -0300</pubDate>
      <guid>https://imlauera.github.io/post/string_facil_reversing/</guid>
      <description>Ejercicio STRING_FACIL.exe de https://drive.google.com/file/d/1QRIk3zBGGXH54nSZorX3jnuNmURCHw6K/view?pli=1&#xA;C√≥digo que me gener√≥ el IDA: int __cdecl main(int argc, const char **argv, const char **envp) { size_t longitud_segunda_cadena; // [esp+0h] [ebp-44h] int v5; // [esp+4h] [ebp-40h] int v6; // [esp+8h] [ebp-3Ch] signed int j; // [esp+Ch] [ebp-38h] signed int i; // [esp+10h] [ebp-34h] signed int longitud_primer_cadena; // [esp+14h] [ebp-30h] char Str2[20]; // [esp+18h] [ebp-2Ch] BYREF char Str[20]; // [esp+2Ch] [ebp-18h] BYREF v5 = 0; sub_401090(std::cout, &amp;#34;Enter the First String: &amp;#34;); sub_401070(std::cin, Str); sub_401090(std::cout, &amp;#34;Enter the Second String: &amp;#34;); sub_401070(std::cin, Str2); longitud_primer_cadena = strlen(Str); longitud_segunda_cadena = strlen(Str2); // Las cadenas NO tienen que ser iguales, pero a su vez la longitud de la primer cadena tiene que ser igual a la longitud de la segunda.</description>
    </item>
    <item>
      <title>Reversing unioncita facilb</title>
      <link>https://imlauera.github.io/post/reversing_unioncita_facilb/</link>
      <pubDate>Sun, 22 Sep 2024 14:11:20 -0300</pubDate>
      <guid>https://imlauera.github.io/post/reversing_unioncita_facilb/</guid>
      <description>El ejercicio unioncita facilb se encuentra en: https://drive.google.com/file/d/1QRIk3zBGGXH54nSZorX3jnuNmURCHw6K/view?pli=1&#xA;Todos los &amp;lsquo;miembros&amp;rsquo; de la union comparten la misma memoria. Los datos son los mismos pero se interpretan de manera diferente.&#xA;#include &amp;lt;stdio.h&amp;gt; union pruebita { int a; char b; char c[2]; }; int main(){ union pruebita HOLA; HOLA.a = 65; HOLA.c[0] = &amp;#39;C&amp;#39;; printf(&amp;#34;%d\n&amp;#34;,HOLA.a); printf(&amp;#34;%c\n&amp;#34;,HOLA.b); return 0; } A diferencia de las estructuras, donde cada miembro tiene su propia √°rea de memoria, todos los miembros de una uni√≥n comparten la misma direcci√≥n, lo que optimiza el uso de memoria.</description>
    </item>
    <item>
      <title>Reversing nuevo facil</title>
      <link>https://imlauera.github.io/post/reversing_nuevo_facil/</link>
      <pubDate>Sat, 21 Sep 2024 04:36:50 -0300</pubDate>
      <guid>https://imlauera.github.io/post/reversing_nuevo_facil/</guid>
      <description>El keygen se encuentra en: https://drive.google.com/file/d/1QRIk3zBGGXH54nSZorX3jnuNmURCHw6K/view?pli=1&#xA;#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; char *gets_s(char *s, size_t n) { if(!s) return NULL; size_t i=0; int ch; for(i=0; i&amp;lt;n-1; i++) { ch = fgetc(stdin); // If end-of-file is encountered and no characters have been read into the array, // or if a read error occurs during the operation, then s[0] is set to the null character if(ferror(stdin) || (ch == EOF &amp;amp;&amp;amp; i == 0)) { s[0] = &amp;#39;\0&amp;#39;; return NULL; } // If EOF and we have read at least one character if(ch == EOF) { s[0] = &amp;#39;\0&amp;#39;; return s; } s[i] = ch; if(ch == &amp;#39;\n&amp;#39;) { s[i] = &amp;#39;\0&amp;#39;; return s; } } while ((ch = getchar()) !</description>
    </item>
    <item>
      <title>Reversing keygen con CPUID</title>
      <link>https://imlauera.github.io/post/reversing_basico/</link>
      <pubDate>Fri, 20 Sep 2024 23:56:53 -0300</pubDate>
      <guid>https://imlauera.github.io/post/reversing_basico/</guid>
      <description>C√≥mo genera el serial: _EAX = 0; __asm { cpuid } resul = _EDX + _EAX + 69; _EAX = 1; __asm { cpuid } __itoa_s(_ECX ^ _EDX ^ resul, my_serial, 0x64u, 16); The cpuid instruction tells you various things about the CPU depending on the content of the eax register. When eax contains zero, the registers ebx, edx, and ecx contain a string describing the processor&amp;rsquo;s vendor. The code you have pulls the string from the registers and prints it out.</description>
    </item>
    <item>
      <title>Android App Reverse Engineering</title>
      <link>https://imlauera.github.io/post/android_reversing/</link>
      <pubDate>Tue, 17 Sep 2024 13:56:22 -0300</pubDate>
      <guid>https://imlauera.github.io/post/android_reversing/</guid>
      <description>https://redirect.invidious.io/playlist?list=PL3jdfxUyXxoyG6qEkaTMq0iWaaVps2SLa&#xA;https://odysee.com/@jadebayo:6/reverse-engineering-an-android-app:e&#xA;https://redirect.invidious.io/watch?v=UwFXndJH_34&amp;amp;list=PLhjZWEsxrYGpxhiSsVgyPM0kLn6EV_GXt&amp;amp;index=12&#xA;sudo apt install -y jadx jadx-gui Carg√° el APK, pod√©s bajar cualquier apk de la fdroid&#xA;https://github.com/pxb1988/dex2jar/releases&#xA;https://java-decompiler.github.io&#xA;adb shell pm list packages | grep virtualmic package: tech.... adb shell pm path tech.smallwonder.androidvirtualmic adb shell pull /date/app/tech....==/base.apk pulled.apk unzip pulled.apk cd pulled cd Downloads/dex-tools-2.2-SNAPSHOT ./d2j-dex2jar.sh classes.dex classes2.dex Generar√° dos archivos .jar Que los cargaremos dentro de este programa (java-decompiler): java -jar Downloads/jd-gui-1.6.6.jar y en classes2-dex2jar estaba todo el c√≥digo.</description>
    </item>
    <item>
      <title>Idapro_copilot</title>
      <link>https://imlauera.github.io/post/idapro_copilot/</link>
      <pubDate>Wed, 11 Sep 2024 06:02:15 -0300</pubDate>
      <guid>https://imlauera.github.io/post/idapro_copilot/</guid>
      <description>https://github.com/Antelcat/ida_copilot&#xA;Caracter√≠sticas&#xA;ü§ñ An√°lisis autom√°tico de c√≥digo: simplemente navegue hasta una funci√≥n, ejecute el complemento y Copilot lo analizar√° autom√°ticamente. üîç Informaci√≥n contextual de funciones: obtenga informaci√≥n detallada sobre funciones, incluidas definiciones, pseudoc√≥digo y comentarios relevantes. ‚úèÔ∏è Cambiar nombre de funciones: la IA analizar√° autom√°ticamente la funci√≥n y le cambiar√° el nombre seg√∫n su funcionalidad. üõ†Ô∏è Integraci√≥n perfecta: el complemento se integra perfectamente con IDA Pro, agregando acciones de men√∫ para un acceso r√°pido y atajos de teclado para los usuarios.</description>
    </item>
    <item>
      <title>Sgtaller</title>
      <link>https://imlauera.github.io/post/sgtaller/</link>
      <pubDate>Tue, 10 Sep 2024 16:53:02 -0300</pubDate>
      <guid>https://imlauera.github.io/post/sgtaller/</guid>
      <description>Hay un torrent dando vueltas si usas jackket y qbittorrent lo vas a encontrar. Ac√° tienen un dump de binario con IDA:&#xA;https://ia904602.us.archive.org/17/items/Service.exe/Service.exe.c</description>
    </item>
    <item>
      <title>Keygen si puedes</title>
      <link>https://imlauera.github.io/post/keygen/</link>
      <pubDate>Mon, 09 Sep 2024 06:41:05 -0300</pubDate>
      <guid>https://imlauera.github.io/post/keygen/</guid>
      <description>El keygen se encuentra en: https://drive.google.com/file/d/1QRIk3zBGGXH54nSZorX3jnuNmURCHw6K/view?pli=1&#xA;El c√≥digo que me gener√≥ el ida es:&#xA;#include &amp;lt;windows.h&amp;gt; #include &amp;lt;defs.h&amp;gt; #include &amp;lt;stdarg.h&amp;gt; //------------------------------------------------------------------------- // Function declarations void __fastcall _mingw_invalidParameterHandler(const wchar_t *expression, const wchar_t *function, const wchar_t *file, unsigned int line, uintptr_t pReserved); int __cdecl pre_c_init(); void __cdecl pre_cpp_init(); // int __cdecl _tmainCRTStartup(); // int __cdecl WinMainCRTStartup(); int __cdecl mainCRTStartup(); char *__fastcall generaLetras(int a1, char *a2); __int64 __fastcall generaNumero(char *a1); // idb int __fastcall generaSerial(char *a1, char *a2); int __fastcall checkSerial(char *a1, char *a2); INT_PTR __fastcall DialogProc(HWND a1, int a2, unsigned __int16 a3); int __stdcall WinMain(HINSTANCE hInst, HINSTANCE hPreInst, LPSTR lpszCmdLine, int nCmdShow); void *__fastcall decode_pointer(void *codedptr); void *__fastcall encode_pointer(void *ptr); int __cdecl setargv(); void __fastcall _mingw_raise_matherr(int typ, const char *name, double a3, double a1, double rslt); void __fastcall _mingw_setusermatherr(int (*f)(_exception *)); int __fastcall matherr(_exception *pexcept); void _report_error(const char *msg, .</description>
    </item>
    <item>
      <title>X86 opcode</title>
      <link>https://imlauera.github.io/post/x86_opcode/</link>
      <pubDate>Sat, 07 Sep 2024 03:08:00 -0300</pubDate>
      <guid>https://imlauera.github.io/post/x86_opcode/</guid>
      <description>&amp;lsquo;%&amp;rsquo; significa &amp;ldquo;and EAX&amp;rdquo;&#xA;&amp;lsquo;-&amp;rsquo; significa &amp;ldquo;sub EAX&amp;rdquo;&#xA;&amp;lsquo;P&amp;rsquo; significa &amp;ldquo;push EAX&amp;rdquo;&#xA;&amp;lsquo;X&amp;rsquo; significa &amp;ldquo;pop EAX&amp;rdquo;&#xA;&amp;lsquo;T&amp;rsquo; significa &amp;ldquo;push ESP&amp;rdquo;&#xA;&amp;lsquo;&#39; significa &amp;ldquo;pop ESP&amp;rdquo;&#xA;https://stackoverflow.com/questions/14349735/why-register-eax-esp-and-instructions-sub-push-and-pop-assemble-into-ascii-cha&#xA;http://ref.x86asm.net/coder32.html</description>
    </item>
    <item>
      <title>Ida PRO Free</title>
      <link>https://imlauera.github.io/post/idapro_free/</link>
      <pubDate>Fri, 06 Sep 2024 05:37:11 -0300</pubDate>
      <guid>https://imlauera.github.io/post/idapro_free/</guid>
      <description>magnet:?xt=urn:btih:6903c417f24b595fc8831933fa454e42e53bd132&amp;amp;dn=IDA%20Pro%209.0%20Beta&amp;amp;tr=http%3A%2F%2Fbt.t-ru.org%2Fann%3Fmagnet Para instalarlo, abr√≠ la carpeta en donde se descarg√≥.&#xA;Ubicate en la carpeta de installers original Ahora ejecut√°&#xA;chmod +x idapro_90_x64linux.run ./idapro_90_x64linux.run Se instalar√° en ~/idapro-9.0&#xA;Ahora ubicate en la carpeta crack copi√° crack_ida90_beta.py a donde se instal√≥ el IDAPro: ~/idapro-9.0 ejecutalo con python crack_ida90_beta.py esto generar√° los archivos libida.so.patched y libida64.so.patched ahora renombralos a libida.so y libida64.so con el siguiente comando:&#xA;mv libida.so.patched libida.so mv libida64.so.patched libida64.so Listo ya deber√≠a funcionar, pod√©s agregarlo al path ejecutando</description>
    </item>
    <item>
      <title>C y reversing</title>
      <link>https://imlauera.github.io/post/c_y_reversing1/</link>
      <pubDate>Tue, 03 Sep 2024 20:02:06 -0300</pubDate>
      <guid>https://imlauera.github.io/post/c_y_reversing1/</guid>
      <description>Reverseamos un hola mundo.&#xA;#include &amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;#34;Hola Mundo\n&amp;#34;); return 0; } Aqu√≠ vemos que el compilador modifico nuestro main haci√©ndolo una funci√≥n de tres argumentos que no son nuestros, sino del compilador, y tiene una variable. var_4 que creo el compilador la cual si hacemos las cuentas devolver√° siempre 10 y la utilizara el compilador al cerrar el programa, por supuesto nada de esto es c√≥digo propio, vayamos a nuestro c√≥digo, propiamente dicho.</description>
    </item>
    <item>
      <title>Ricardo Narvaja (Ex√°men 22)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_22/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:47 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_22/</guid>
      <description>Este ex√°men tiene demasiado c√≥digo como para pegarlo ac√°.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 17 (Servidor, zlib.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_17/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_17/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al char v8; // [esp+0h] [ebp-12E0h] char v9; // [esp+0h] [ebp-12E0h] char v10; // [esp+0h] [ebp-12E0h] char v11; // [esp+0h] [ebp-12E0h] char v12[4096]; // [esp+8h] [ebp-12D8h] BYREF char v13[400]; // [esp+1008h] [ebp-2D8h] BYREF char Format[200]; // [esp+1198h] [ebp-148h] BYREF char v15[64]; // [esp+1260h] [ebp-80h] BYREF char v16[16]; // [esp+12A0h] [ebp-40h] BYREF __int16 v17[2]; // [esp+12B0h] [ebp-30h] BYREF int v18; // [esp+12B4h] [ebp-2Ch] int v19; // [esp+12C0h] [ebp-20h] int v20; // [esp+12C4h] [ebp-1Ch] BYREF char v21[4]; // [esp+12C8h] [ebp-18h] char v22[4]; // [esp+12CCh] [ebp-14h] int v23; // [esp+12D0h] [ebp-10h] int i; // [esp+12D4h] [ebp-Ch] int v25; // [esp+12D8h] [ebp-8h] char v26; // [esp+12DFh] [ebp-1h] strcpy(v15, &amp;#34;Hello Client , I have received your connection your key is %d.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 18 (Servidor, libw32pth-0.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_18/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_18/</guid>
      <description>int sub_4014E0(char *Buffer, char *Format, ...) { va_list va; // [esp+18h] [ebp+10h] BYREF va_start(va, Format); sub_401010(); return sub_401450(Buffer, Format, 0, va); } int __cdecl sub_401020(int a1) { char v1; // al char v3; // al char v4; // al char v5; // al size_t v6; // eax char v7; // [esp+0h] [ebp-12DCh] char v8; // [esp+0h] [ebp-12DCh] char v9; // [esp+0h] [ebp-12DCh] char v10; // [esp+0h] [ebp-12DCh] char v11[4096]; // [esp+8h] [ebp-12D4h] BYREF char v12[400]; // [esp+1008h] [ebp-2D4h] BYREF char Format[64]; // [esp+1198h] [ebp-144h] BYREF char Str[200]; // [esp+11D8h] [ebp-104h] BYREF char v15[16]; // [esp+12A0h] [ebp-3Ch] BYREF __int16 v16[2]; // [esp+12B0h] [ebp-2Ch] BYREF int v17; // [esp+12B4h] [ebp-28h] int v18; // [esp+12C0h] [ebp-1Ch] int v19; // [esp+12C4h] [ebp-18h] BYREF char v20[4]; // [esp+12C8h] [ebp-14h] int i; // [esp+12CCh] [ebp-10h] int v22; // [esp+12D0h] [ebp-Ch] int v23; // [esp+12D4h] [ebp-8h] char v24; // [esp+12DBh] [ebp-1h] strcpy(Format, &amp;#34;Hello Client , I have received your connection your key is %d.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 19 (Servidor, WCMZIP32.DLL)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_19/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_19/</guid>
      <description>_DWORD *__thiscall sub_401020(_DWORD *this) { sub_4010C0(this); *this = off_403348; this[2] = 0; this[113] = 0; this[114] = 0; *((_BYTE *)this + 4756) = 0; memset(this + 115, 0, 0xC8u); memset(this + 165, 0, 0x1000u); memset((char *)this + 4757, 0, 0xC8u); return this; } _DWORD *__thiscall sub_401650(_DWORD *this, int a2) { _DWORD *result; // eax result = this; this[2] = a2; return result; } int __thiscall sub_4010E0(char *this) { char v1; // al char v2; // al size_t v3; // eax sub_4014D0(this); *((_DWORD *)this + 104) = WS2_32_1(*((_DWORD *)this + 103), this + 436, this + 452); if ( *((_DWORD *)this + 104) == -1 ) { v1 = WS2_32_111(); sub_4017F0(&amp;#34;accept failed with error code : %d&amp;#34;, v1); } puts(&amp;#34;Connection accepted\n&amp;#34;); memset(this + 4757, 0, 0xC8u); sub_4017F0(&amp;#34;number= %d\n&amp;#34;, *((_DWORD *)this + 2)); v2 = sub_401490(8888); sub_401830(this + 4757, &amp;#34;Nuevo Port is = %d\n&amp;#34;, v2); WS2_32_19(*((_DWORD *)this + 104), this + 4757, 200, 0); v3 = strlen(this + 4757); WS2_32_16(*((_DWORD *)this + 104), Src, v3, 0); if ( *(_DWORD *)Src == 1094861636 ) { WS2_32_3(*((_DWORD *)this + 103)); return 1; } else { puts(&amp;#34;Bye Bye love\n&amp;#34;); return 0; } } int __thiscall sub_401240(int this) { char v1; // al char v3; // [esp+0h] [ebp-Ch] int v4; // [esp+0h] [ebp-Ch] signed int i; // [esp+4h] [ebp-8h] sub_4014D0(this); *(_DWORD *)(this + 416) = WS2_32_1(*(_DWORD *)(this + 412), this + 436, this + 452); if ( *(_DWORD *)(this + 416) == -1 ) { v1 = WS2_32_111(); sub_4017F0(&amp;#34;accept failed with error code : %d&amp;#34;, v1); } puts(&amp;#34;Connection accepted\n&amp;#34;); memset((void *)(this + 4757), 0, 0xC8u); sub_4017F0(&amp;#34;number= %d\n&amp;#34;, *(_DWORD *)(this + 8)); sub_401830((char *)(this + 4757), (char *)(this + 460), dword_404080[0]); sub_4017F0((char *)(this + 4757), v3); WS2_32_19(*(_DWORD *)(this + 416), this + 4757, 200, 0); *(_DWORD *)(this + 456) = dword_404084; WS2_32_16(*(_DWORD *)(this + 416), Src, 12288, 0); v4 = *((_DWORD *)Src + 1) + *(_DWORD *)Src; sub_4017F0(&amp;#34;%x\n\n&amp;#34;, v4); if ( v4 == -1 ) { Size = *((_DWORD *)Src + 2); dword_404078 = *((_DWORD *)Src + 3); } memcpy((void *)(this + 660), Src, Size); for ( i = 0; i &amp;lt; (int)Size; ++i ) { *(_BYTE *)(this + 4756) = *(_BYTE *)(i + this + 660); if ( *(_BYTE *)(this + 4756) == 4 ) exit(1); if ( *(_BYTE *)(this + 4756) == 65 ) exit(1); } if ( dword_404078 !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 20 (Servidor, libiconv-2.dll, iconv.dll, intl.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_20/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_20/</guid>
      <description>Hay 3 ex√°menes Examen a _BYTE *__cdecl sub_40ADB0(_BYTE *a1, _BYTE *a2) { _BYTE *v2; // edi _BYTE *v3; // ecx int v4; // edx int v5; // eax _BYTE *result; // eax v2 = a1; v3 = a2; if ( ((unsigned __int8)a2 &amp;amp; 3) == 0 ) { while ( 1 ) { LABEL_6: v5 = (*(_DWORD *)v3 + 2130640639) ^ ~*(_DWORD *)v3; v4 = *(_DWORD *)v3; v3 += 4; if ( (v5 &amp;amp; 0x81010100) !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 21 (Ejecutar la calculadora, con base de datos:ConsoleApplication4.pdb)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_21/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_21/</guid>
      <description>int __thiscall sub_401050(_DWORD *this, int a2, int a3, int *a4, int *a5) { int v6[256]; // [esp+0h] [ebp-404h] BYREF _DWORD *v7; // [esp+400h] [ebp-4h] v7 = this; sub_401010(this, a2, a3, a4, a5); *v7 = &amp;amp;off_41A348; a2 = 0; a3 = 0; a4 = &amp;amp;a2; a5 = &amp;amp;a3; *(v7 + 1024) = 0; *(v7 + 1025) = 0; *(v7 + 1026) = 0; sub_401010(v6, a2, a3, a4, a5); return v7; } _DWORD *__thiscall sub_401010(_DWORD *this, int a2, int a3, int a4, int a5) { *this = &amp;amp;off_41A33C; this[2] = a2; this[3] = a3; this[5] = a5; this[4] = a4; return this; } LPVOID __cdecl sub_40C2D8(SIZE_T dwBytes) { SIZE_T v1; // esi LPVOID result; // eax v1 = dwBytes; if ( dwBytes &amp;gt; 0xFFFFFFE0 ) { LABEL_8: *(_DWORD *)sub_40CBC6() = 12; return 0; } else { if ( !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 23 (kernel32.dll) 64 bits</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_23/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_23/</guid>
      <description>int __fastcall main(int argc, const char **argv, const char **envp) { FILE *v3; // rax int v4; // ebx char Buffer[4]; // [rsp+20h] [rbp-E8h] BYREF qword_140003628 = GetModuleHandleA(&amp;#34;kernel32.dll&amp;#34;); while ( 1 ) { Stream = fopen(&amp;#34;fichero.dat&amp;#34;, &amp;#34;a+&amp;#34;); if ( !Stream ) break; v3 = _acrt_iob_func(0); fgets(Buffer, 450, v3); fwrite(Buffer, 1uLL, 450uLL, Stream); v4 = *Buffer; fclose(Stream); if ( v4 == 0x41424344 ) return 0; } perror(&amp;#34;No se puede escribir fichero.dat&amp;#34;); printf(&amp;#34;%x&amp;#34;); return -1; } </description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 16 (Servidor, MObexDll.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_16/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:38 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_16/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al char v8; // [esp+0h] [ebp-12D0h] char v9; // [esp+0h] [ebp-12D0h] char v10; // [esp+0h] [ebp-12D0h] char v11[4096]; // [esp+8h] [ebp-12C8h] BYREF char v12[400]; // [esp+1008h] [ebp-2C8h] BYREF char Destination[200]; // [esp+1198h] [ebp-138h] BYREF char Source[52]; // [esp+1260h] [ebp-70h] BYREF char v15[16]; // [esp+1294h] [ebp-3Ch] BYREF __int16 v16[2]; // [esp+12A4h] [ebp-2Ch] BYREF int v17; // [esp+12A8h] [ebp-28h] int v18; // [esp+12B4h] [ebp-1Ch] int v19; // [esp+12B8h] [ebp-18h] BYREF char v20[4]; // [esp+12BCh] [ebp-14h] int v21; // [esp+12C0h] [ebp-10h] int i; // [esp+12C4h] [ebp-Ch] int v23; // [esp+12C8h] [ebp-8h] strcpy(Source, &amp;#34;Hello Client , I have received your connection.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 15 (Servidor, MObexDll.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_15/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:36 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_15/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al size_t v8; // eax char v9[4096]; // [esp+0h] [ebp-11D8h] BYREF char v10[400]; // [esp+1000h] [ebp-1D8h] BYREF char v11[16]; // [esp+1190h] [ebp-48h] BYREF __int16 v12[2]; // [esp+11A0h] [ebp-38h] BYREF int v13; // [esp+11A4h] [ebp-34h] int v14; // [esp+11B0h] [ebp-28h] int v15; // [esp+11B4h] [ebp-24h] BYREF size_t Size; // [esp+11B8h] [ebp-20h] char v17[4]; // [esp+11BCh] [ebp-1Ch] char *Str; // [esp+11C0h] [ebp-18h] int v19; // [esp+11C4h] [ebp-14h] int i; // [esp+11C8h] [ebp-10h] int v21; // [esp+11CCh] [ebp-Ch] void *Src; // [esp+11D4h] [ebp-4h] Size = 4096; Src = malloc(0x2000u); LoadLibraryA(&amp;#34;MObexDll.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 14 (Servidor, helixprodctrl.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_14/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:34 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_14/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al size_t v8; // eax char v9[400]; // [esp+0h] [ebp-28Ch] BYREF char v10[200]; // [esp+190h] [ebp-FCh] BYREF char v11[16]; // [esp+258h] [ebp-34h] BYREF __int16 v12[2]; // [esp+268h] [ebp-24h] BYREF int v13; // [esp+26Ch] [ebp-20h] int v14; // [esp+278h] [ebp-14h] int v15[2]; // [esp+27Ch] [ebp-10h] BYREF int v16; // [esp+284h] [ebp-8h] int v17; // [esp+288h] [ebp-4h] LoadLibraryA(&amp;#34;helixprodctrl.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Ex√°men 13 (Ejecutar calculadora)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_13/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:32 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_13/</guid>
      <description>_DWORD *__thiscall this_50(_DWORD *this) { this[50] = &amp;#34;A ejecutar la calculadora de nuevo...\n&amp;#34;; return this; } int __cdecl sub_401040(int a1, int a2, char *FileName) { FILE *Stream; // [esp+0h] [ebp-4h] Stream = fopen(FileName, &amp;#34;rb&amp;#34;); fread(FileName + 204, 300u, 1u, Stream); printf(&amp;#34;Salida %s\n&amp;#34;, a2); dword_403020 = dword_403024 + *(FileName + 102); (dword_403020)(a2); return 0; } int __cdecl main(int argc, const char **argv, const char **envp) { char Buffer[200]; // [esp+0h] [ebp-268h] BYREF char Destination[404]; // [esp+C8h] [ebp-1A0h] BYREF FILE *Stream; // [esp+25Ch] [ebp-Ch] int (__cdecl *v7)(char *, char); // [esp+260h] [ebp-8h] char v8[4]; // [esp+264h] [ebp-4h] if ( argc &amp;lt; 2 ) { printf(&amp;#34;bye: \n&amp;#34;, Buffer[0]); exit(1); } this_50(Destination); v7 = (&amp;amp;system + 110); dword_403024 = &amp;amp;system + 110; memset(Destination, 0, 0xC8u); memset(&amp;amp;Destination[204], 0, 0xC8u); memset(Buffer, 0, sizeof(Buffer)); strcpy(Destination, argv[1]); Stream = fopen(Destination, &amp;#34;r&amp;#34;); if ( !</description>
    </item>
    <item>
      <title>Ricardo narvaja: Ex√°men 12 (Ejecutar calculadora)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_12/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:22 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_12/</guid>
      <description>Este tiene bufferoverflow en el nombre del archivo. Ten√©s que crear un archivo con un nombre muy largo y desborda y pisa el EIP. Ejemplo:&#xA;‚îî‚îÄ$ wine ConsoleApplication11.exe AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAA wine: Unhandled page fault on read access to 41414141 at address 7B3630C6 (thread 00 24), starting debugger... Unhandled exception: page fault on read access to 0x41414141 in wow64 32-bit code (0 x7b3630c6). 0114:err:dbghelp_msc:pe_load_debug_directory Got a page fault while loading symbols winedbg: Internal crash at 7AC68CF4 Lo que me decompila el IDA:</description>
    </item>
    <item>
      <title>Reversing: Ex√°men 11 (Ricardo Narvaja)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_11/</link>
      <pubDate>Tue, 27 Aug 2024 01:56:28 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_11/</guid>
      <description>Los retos los hice usando vim con la siguiente configuracion:&#xA;&amp;#34; vim -b : edit binary using xxd-format! augroup Binary au! au BufReadPre *.bin let &amp;amp;bin=1 au BufReadPost *.bin if &amp;amp;bin | %!xxd au BufReadPost *.bin set ft=xxd | endif au BufWritePre *.bin if &amp;amp;bin | %!xxd -r au BufWritePre *.bin endif au BufWritePost *.bin if &amp;amp;bin | %!xxd au BufWritePost *.bin set nomod | endif augroup END autocmd BufWritePost *.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Examen 10 (Ejecutar calculadora no es un bufferoverflow)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_10/</link>
      <pubDate>Mon, 26 Aug 2024 15:52:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_10/</guid>
      <description>No me funcionaba con wine en linux porque verifica si argc == 2 y si ejecut√°s wine EXAMEN_10.exe 49 el argc vale 3, as√≠ que tuve que ejecutar el exploit en windows. En linux en vez de usar calc uso cmd porque calc no est√° disponible a nivel global.&#xA;El c√≥digo que me gener√≥ el ida con algunas modificaciones&#xA;_DWORD *__thiscall this_106(_DWORD *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Ricardo Narvaja Reversing: Buffer overflow examen 9</title>
      <link>https://imlauera.github.io/post/buffer_overflow_9/</link>
      <pubDate>Sat, 24 Aug 2024 05:09:01 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_9/</guid>
      <description>Este reto usa vfprintf #include &amp;lt;stdarg.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; void vout(FILE *stream, char *fmt, ...); char fmt1 [] = &amp;#34;%s %s %s\n&amp;#34;; int main(void) { FILE *stream; stream = fopen(&amp;#34;myfile.dat&amp;#34;, &amp;#34;w&amp;#34;); vout(stream, fmt1, &amp;#34;Sat&amp;#34;, &amp;#34;Sun&amp;#34;, &amp;#34;Mon&amp;#34;); } void vout(FILE *stream, char *fmt, ...) { va_list arg_ptr; va_start(arg_ptr, fmt); vfprintf(stream, fmt, arg_ptr); va_end(arg_ptr); } printf que me decompilo el ida:&#xA;int printf(char *Format, ...) { FILE *v1; // eax va_list va; // [esp+14h] [ebp+Ch] BYREF va_start(va, Format); sub_401000(); v1 = _acrt_iob_func(1u); return vfprintf(v1, Format, 0, va); } Esto me gener√≥ el IDA con algunos retoques: // Overfloodea cuando cargo el caracter 169 char *this_106(char *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Buffer overflow 7 (Ricardo navarja reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_7/</link>
      <pubDate>Tue, 20 Aug 2024 23:49:30 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_7/</guid>
      <description>Este es el c√≥digo que me gener√≥ el IDA con mis modificaciones:&#xA;int __cdecl check(char *Stream) { char savedregs; // [esp+0h] [ebp+0h] sprintf(Stream + 220, &amp;#34;Bieeeeeeeeeeeeeeeeeeeen ? con %s&amp;#34;, Stream + 4); if ( *(Stream + 52) != &amp;#39;E&amp;#39; ) { printf(&amp;#34;Mal camino \n&amp;#34;, savedregs); exit(1); } if ( Stream[216] != 0xD ) *(Stream + 54) = 2; printf(&amp;#34;valor= %x\n&amp;#34;, Stream[216]); printf(&amp;#34;number= %x\n&amp;#34;, Stream[204]); if ( *(Stream + 53) == &amp;#39;F&amp;#39; ) printf(&amp;#34;Aprobaste level 7&amp;#34;, savedregs); else printf(&amp;#34;Que pasa, %x \n&amp;#34;, Stream[216] + Stream[204]); return 0; } int main(int argc, const char **argv) { FILE *Stream; // [esp+0h] [ebp-1A4h] BYREF char Buffer[200]; // [esp+4h] [ebp-1A0h] BYREF int v6; // [esp+CCh] [ebp-D8h] int v7; // [esp+D0h] [ebp-D4h] int v8; // [esp+D4h] [ebp-D0h] char Destination[200]; // [esp+DCh] [ebp-C8h] BYREF v6 = 1; v8 = 1; v7 = 69; memset(Buffer, 0, sizeof(Buffer)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Buffer Overflow Examen 6 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_6/</link>
      <pubDate>Tue, 20 Aug 2024 18:04:05 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_6/</guid>
      <description>El IDA me lo decompila a :&#xA;void *check(void *this) { this[102] = 0; this[104] = &amp;#34;Aprobaste level 6&amp;#34;; this[105] = &amp;#34;A practicar y repasar mas ...&amp;#34;; return this; } int check3(char *Destination) { // Concatenaci√≥n. strcat(Destination, Destination[105]); if ( strlen(Destination) == 229 ) { if ( Destination[4] == 0x49 ) Destination[50] = 1; if ( Destination[5] != 0x50 ) Destination[50] = 0; } return 0; } int check2(char *Destination) { check3(Destination); if ( Destination[50] == 1 ) printf(&amp;#34;%s\n&amp;#34;, Destination[104]); else printf(&amp;#34;%s\n&amp;#34;, Destination[105]); return 0; } int __cdecl main(int argc, const char **argv, const char **envp) { char Destination[200]; // [esp+0h] [ebp-1A8h] BYREF int v5; // [esp+C8h] [ebp-E0h] BYREF FILE *Stream; // [esp+CCh] [ebp-DCh] char Buffer[200]; // [esp+D0h] [ebp-D8h] BYREF int *puntero_a_v5; // [esp+19Ch] [ebp-Ch] check(Destination); v5 = 0; puntero_a_v5 = &amp;amp;v5; memset(Buffer, 0, 200*sizeof(char)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Explicaci√≥n de todos los ex√°menes de buffer overflow de Ricardo Narvaja Reversing</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_cracking/</link>
      <pubDate>Thu, 08 Aug 2024 06:01:01 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_cracking/</guid>
      <description>Todos sus videos consisten en explotar diferentes tipos de buffer overflows en programas 32 bits, y me parece que a veces se enfoca demasiado en la utilizaci√≥n de la herramienta IDA en lugar de explicar primero lo m√°s importante que es: ¬øpor qu√© la aplicaci√≥n es vulnerable a esos ataques? Si se entiende eso, se tiene una mejor intuici√≥n de como funciona. Estoy hablando espec√≠ficamente de los cursos que tiene en su canal Ricardo Narvaja.</description>
    </item>
    <item>
      <title>Buffer overflow ex√°men 5 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/bufferoverflow_5/</link>
      <pubDate>Wed, 07 Aug 2024 18:31:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_5/</guid>
      <description>Lo que el decompilador de IDA me gener√≥ con algunas modificaciones.&#xA;int check(char *buffer) { // Copia el buffer a partir de la posici√≥n 216 al comienzo del buffer a partir de la posici√≥n 4. // 11 caracteres insertando al buffer // 4+4+11 = 19 char savedregs; // 199 -4 + 11 sprintf(&amp;amp;buffer[4], &amp;#34;Bien ? con %s&amp;#34;, buffer + 216); // 52-19 = 33 // La posici√≥n 33 del archivo example.</description>
    </item>
    <item>
      <title>Explotando buffer overflows: copia un buffer de 200 bytes a otro del mismo tama√±o pero con una string agregada.</title>
      <link>https://imlauera.github.io/post/bufferoverflow_4/</link>
      <pubDate>Wed, 07 Aug 2024 13:37:58 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_4/</guid>
      <description>El overflow se produce porque tenemos dos buffers de 200, tenemos un sprintf toma un buffer de 200 y le agrega un texto y lo guarda en el otro buffer de 200. Entonces como la otra puede ser cercana a 200 (200 menos el byte del &#39;\0&#39;), va a haber un overflow.&#xA;Una posible primer soluci√≥n (no funciona en este caso) Dos buffers de 200 bytes. Llenamos el buffer con 200, strcpy copiar√° hasta donde encuentre un 0 y como el store de bp no puede ser 0 porque guarda el valor de bp de la funci√≥n padre entonces esa direcci√≥n va a pendear(concatenar) y la va a copiar al buffer de destino y podemos producir un overflow por no poner un 0 final en la string, porque como estamos leyendo de un archivo de texto binario podemos poner cualquier byte y los 200 puede ser todas As y no necesariamente terminar en 0, entonces luego al copiarlo se copian las 200 As m√°s cualquier cosa que haya a continuaci√≥n hasta que encuentre un 0.</description>
    </item>
    <item>
      <title>Explotando buffer overflow provocado por copiar un buffer de 300 a uno de 200</title>
      <link>https://imlauera.github.io/post/bufferoverflow_3/</link>
      <pubDate>Wed, 07 Aug 2024 07:24:45 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_3/</guid>
      <description>Lo √∫nico que hacemos es pisar la variable que est√° abajo del buffer de 200 porque copia el contenido del buffer de 200 a un buffer de 300. Le ponemos de valor 0 a la variable que est√° debajo del buffer de 200 porque hace esta comparaci√≥n cmp ptr [eax+0C8h],0 para ganar el reto. En donde 0C8h es un offset que hace referencia a una variable que est√° dentro de estructura en donde est√° tambi√©n declarado el buffer.</description>
    </item>
    <item>
      <title>Explotando el t√≠pico buffer overflow copia un buffer mas grande a uno m√°s chico.</title>
      <link>https://imlauera.github.io/post/bufferoverflow_strcpy/</link>
      <pubDate>Wed, 07 Aug 2024 06:03:47 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_strcpy/</guid>
      <description>Lee 210 de un archivo en el 1er buffer, pero en el 2do buffer est√° el overflow porque Dst(Destination) es un buffer de 200 bytes. Le pasa un puntero, o sea la direcci√≥n del buffer Dst a la funci√≥n check.&#xA;Si en una funci√≥n se pasa un puntero y a partir de esa direcci√≥n se le suma un offset y se encuentran valores para comparar o distintos campos, sabemos que ah√≠ hay una estructura, podr√≠a haber una estructura que abarque todas las variables de la primera funci√≥n.</description>
    </item>
    <item>
      <title>Explotando un buffer overflow provocado al querer restringir/comparar el tama√±o del buffer sin considerar el signo.</title>
      <link>https://imlauera.github.io/post/buffer_overflow_curso1/</link>
      <pubDate>Tue, 06 Aug 2024 16:59:15 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_curso1/</guid>
      <description>Archivo del examen: EXAMEN_LEVEL_1b.7z EXAMENES LA CONTRASE√ëA es A&#xA;O descargalo desde ac√°: http://ricardonarvaja.info/WEB/IDA%20DESDE%20CERO/EXAMENES/EXAMENES%20Password=a.7z&#xA;La comparaci√≥n se realiz√≥ con jl. Luego pisamos la variable numero_random con 44434241 que luego se xorea con la variable numero_2 que es 0, y eso har√° que pasemos el nivel.&#xA;Inicio Concepto fundamental: Qu√© es un offset?&#xA;En inform√°tica, un offset dentro de un array u otra estructura de datos es un entero que indica la distancia (desplazamiento) desde el inicio del objeto hasta un punto o elemento dado, presumiblemente dentro del mismo objeto.</description>
    </item>
    <item>
      <title>Reversing CrackMe simple con el decompilador de Ghidra</title>
      <link>https://imlauera.github.io/post/ghidra/</link>
      <pubDate>Tue, 06 Aug 2024 07:37:45 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ghidra/</guid>
      <description>Instal√° ghidra: sudo apt install -y ghidra O lo pod√©s descargar e instalar desde ac√°: https://github.com/NationalSecurityAgency/ghidra&#xA;Descarg√° el archivo del desaf√≠o unlock_me1, ac√°: https://secur3.us/GhidraFiles/unlock_me1&#xA;Los pasos b√°sicos para afrontar un desaf√≠o como este son:&#xA;Crea un proyecto Ghidra e importa el programa de desaf√≠o. Abr√≠ unlock_me1 en CodeBrowser e inicia el an√°lisis autom√°tico. Busca la funci√≥n principal (primer argumento de __libc_start_main() Renombra el nombre de las variables y funciones hasta que comprendas la l√≥gica.</description>
    </item>
    <item>
      <title>Reversing: IDA Free</title>
      <link>https://imlauera.github.io/post/reversing_ida_pro_free/</link>
      <pubDate>Thu, 27 Jun 2024 21:22:58 -0300</pubDate>
      <guid>https://imlauera.github.io/post/reversing_ida_pro_free/</guid>
      <description>Lo m√°s importante es entender C,ASM y el concepto b√°sico de un buffer overflow.&#xA;Ayer estaba jugando un poco con IDA PRO aprendiendo un poco de ASM. https://hex-rays.com/ida-free/&#xA;Analicemos el siguiente c√≥digo&#xA;C: int main(){ return -1; } Este es el c√≥digo que nos genera el IDA:&#xA;ASM: ; Attributes: bp-based frame ; int __cdecl main(int argc, const char **argv, const char **envp) public main main proc near ; __unwind { push rbp ; Almacenar el registro RBP en la pila mov rbp, rsp ; Asigna a RBP el valor del registro apuntador RSP mov eax, 0FFFFFFFFh ; Mueve el -1 (escrito hexadecimal) al registro acumulador (eax).</description>
    </item>
  </channel>
</rss>
