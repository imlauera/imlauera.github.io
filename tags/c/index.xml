<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Imlauer</title>
    <link>https://imlauera.github.io/tags/c/</link>
    <description>Recent content in C on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Thu, 27 Feb 2025 00:46:28 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Makefile: Compilar todos los archivos de C de una.</title>
      <link>https://imlauera.github.io/makefile/</link>
      <pubDate>Thu, 27 Feb 2025 00:46:28 -0300</pubDate>
      <guid>https://imlauera.github.io/makefile/</guid>
      <description>LIBS = -lkernel32 -luser32 -lgdi32 -lopengl32 CFLAGS = -Wall # Should be equivalent to your list of C files, if you don&amp;#39;t build selectively SRC=$(wildcard *.c) test: $(SRC) gcc -o $@ $^ $(CFLAGS) $(LIBS) Otra forma:&#xA;SRCS=$(wildcard *.c) OBJS=$(SRCS:.c=.o) all: $(OBJS) Compilar main.c y ejecutarlo:&#xA;main: main.c gcc -Wall -Wextra -o main main.c ./main </description>
    </item>
    <item>
      <title>Crear ventana y pintarla en SDL2 en C</title>
      <link>https://imlauera.github.io/sdl/</link>
      <pubDate>Thu, 20 Feb 2025 19:56:57 -0300</pubDate>
      <guid>https://imlauera.github.io/sdl/</guid>
      <description>Debés incluir SDL2/SDL.h.&#xA;void scc(int code){ if (code &amp;lt; 0){ fprintf(stderr, &amp;#34;SDL ERROR: %s\n&amp;#34;, SDL_GetError()); exit(1); } } void *scp(void *ptr){ if (ptr == NULL){ fprintf(stderr, &amp;#34;SDL ERROR: %s\n&amp;#34;, SDL_GetError()); exit(1); } } SDL_Surface *surface_from_file(const char *file_path){ int w, h, n; unsigned char *pixels = stbi_load(file_path, &amp;amp;w, &amp;amp;h, &amp;amp;n, STBI_rgb_alpha); if (pixels == NULL){ fprintf(stderr, &amp;#34;ERROR: could not load file %s\n&amp;#34;, file_path, stbi_failure_reason()); exit(1); } } SDL_Window *window = SDL_CreateWindow SDL_Renderer *renderer = SDL_CreateRenderer(window, -1 , SDL_RENDERER_ACCELERATED)); SDL_Surface *surface = scp(SDL_CreateRGBSurfaceWithFormat(flags, width, height, depth, format); SDL_Surface *surface = scp(SDL_CreateRGBSurfaceFrom(FONT, FONT_WIDTH, FONT_HEIGHT, 32, FONT_WIDTH, 0xFF, 0xFF, 0xFF, 0xFF)); bool quit = false; while (!</description>
    </item>
    <item>
      <title>Cargar texto de un archivo en un buffer en C</title>
      <link>https://imlauera.github.io/leer_texto_archivo/</link>
      <pubDate>Sat, 15 Feb 2025 22:04:37 -0300</pubDate>
      <guid>https://imlauera.github.io/leer_texto_archivo/</guid>
      <description>La mayoría de las veces cuando lees que usan la función feof está mal. En mi experiencia se vió que es muy fácil de llamarla al tiempo incorrecto y procesar algo dos veces creyendo que EOF no fue alcanzado.&#xA;int c; while (( c = getchar()) != EOF){ }&#xA;int c; while (( c = getc(fp)) != EOF){ }&#xA;Intentá evitar usar char para el tipo c. getchar retorna el siguiente caracter casteado a un unsigned char y luego a un int.</description>
    </item>
    <item>
      <title>Agregar enumeración líneas en C</title>
      <link>https://imlauera.github.io/enumerar_lineas_c/</link>
      <pubDate>Sat, 15 Feb 2025 22:01:09 -0300</pubDate>
      <guid>https://imlauera.github.io/enumerar_lineas_c/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; // Agregá enumeración de cada línea de un archivo. // Vim agrega un salto de línea siempre al final, // por lo tanto usaremos echo: // echo -n -e &amp;#34;Hola\nEsto es\nuna prueba&amp;#34; int main(void){ FILE *fp = fopen(&amp;#34;/tmp/asdf&amp;#34;, &amp;#34;rw+&amp;#34;); FILE *fq = fopen(&amp;#34;/tmp/resultado&amp;#34;, &amp;#34;w+&amp;#34;); int lineas = 1; int c; char buffer[3] = &amp;#34;1: &amp;#34;; for (int i = 0; i &amp;lt; strlen(buffer); i++){ putc(buffer[i], fq); } while (( c = getc(fp) ) !</description>
    </item>
    <item>
      <title>C: Nobuild</title>
      <link>https://imlauera.github.io/nobuild/</link>
      <pubDate>Fri, 14 Feb 2025 23:04:52 -0300</pubDate>
      <guid>https://imlauera.github.io/nobuild/</guid>
      <description>#define NOBUILD_IMPLEMENTATION #include &amp;#34;./nobuild.h&amp;#34; #define CFLAGS &amp;#34;-Wall&amp;#34;, &amp;#34;-Wextra&amp;#34;, &amp;#34;-std=c11&amp;#34;, &amp;#34;-pedantic&amp;#34;, &amp;#34;-ggdb&amp;#34; int main(int argc, char **argv) { GO_REBUILD_URSELF(argc, argv); CMD(&amp;#34;cc&amp;#34;, CFLAGS, &amp;#34;-o&amp;#34;, &amp;#34;minicel&amp;#34;, &amp;#34;src/mainc.&amp;#34;); if (argc &amp;gt; 1){ if (strcmp(argv[1], &amp;#34;run&amp;#34;) == 0){ CMD(&amp;#34;./minicel&amp;#34;, &amp;#34;input.csv&amp;#34;); } else if (strcmp(argv[1], &amp;#34;gdb&amp;#34;) == 0){ CMD(&amp;#34;gdb&amp;#34;, &amp;#34;./minicel&amp;#34;); } else { PANIC(&amp;#34;%s is unknown subcommand&amp;#34;, argv[1]); } } return 0; } Es como usar C como shell script.</description>
    </item>
    <item>
      <title>Ordenar array de enteros por la sumatoria más grande.</title>
      <link>https://imlauera.github.io/ordenar_array_de_enteros/</link>
      <pubDate>Sun, 09 Feb 2025 20:11:09 -0300</pubDate>
      <guid>https://imlauera.github.io/ordenar_array_de_enteros/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; int cmpint(int *p1, int *p2){ int suma_p1 = 0; int suma_p2 = 0; //printf(&amp;#34;elementos p1: %d\n&amp;#34;,*(const int **)p1/sizeof(**(const int **)p1)); for (int i = 0; i &amp;lt; 3; i++){ suma_p1 += p1[i]; } for (int i = 0; i &amp;lt; 3; i++){ suma_p2 += p2[i]; } printf(&amp;#34;Suma p1: %d\n&amp;#34;, suma_p1); printf(&amp;#34;Suma p2: %d\n&amp;#34;, suma_p2); if (suma_p1 &amp;lt; suma_p2) return 1; return 0; } static int cmpstringp(const void *p1, const void *p2) { // strcmp(*(const char **) p1, *(const char **) p2); // **(const int **)p1 = 1 // **(const int **)p2 = 20 return cmpint( *(int**)p1, *(int**)p2); } int main(int argc, char *argv[]) { int *num1 = malloc(sizeof(int)*3); int *num2 = malloc(sizeof(int)*3); int **numeros = malloc(sizeof(int*)*2); num1[0] = 999; num1[1] = 9; num1[2] = 10; num2[0] = 20; num2[1] = 4; num2[2] = 123; numeros[0] = num1; numeros[1] = num2; // char **argv // qsort(&amp;amp;argv[1], argc - 1, sizeof(char*), cmpstringp); qsort( &amp;amp;numeros[0], 2, sizeof(int*), cmpstringp ); printf(&amp;#34;Imprimimos el array con la suma más grande\n&amp;#34;); for (int i = 0; i &amp;lt; 3; i++) { printf(&amp;#34;%d &amp;#34;, numeros[0][i]); } exit(EXIT_SUCCESS); } </description>
    </item>
    <item>
      <title>Free pointer of pointers</title>
      <link>https://imlauera.github.io/free_array_of_arrays/</link>
      <pubDate>Sat, 08 Feb 2025 18:44:48 -0300</pubDate>
      <guid>https://imlauera.github.io/free_array_of_arrays/</guid>
      <description>Sólo tenés que pensar en liberar memoria cuando tenés un programa muy grande que pide un poco de memoria en un loop y eso acumula memoria con el tiempo, pero si tenés un programa batch (por lotes) que pide memoria (allocated memory), no hay necesidad de liberar esa memoria porque el sistema operativo lo hará por vos cuando el programa finalice. (Leer al final más info).&#xA;No podes &amp;ldquo;liberar&amp;rdquo; un puntero de punteros.</description>
    </item>
    <item>
      <title>Debuggear c con GDB</title>
      <link>https://imlauera.github.io/debugear_c/</link>
      <pubDate>Sat, 08 Feb 2025 02:22:43 -0300</pubDate>
      <guid>https://imlauera.github.io/debugear_c/</guid>
      <description>gcc -ggdb find_length_string.c -o find_length_string gdb -q ./find_length_string break main run tui enable n n n p variable p puntero p *puntero n n ... O podes usar enter para repetir comando anterior. Me gusta el debugger porque te obliga a analizar cada pequeño detalle porque si solo leyeras el código los ignorarías. El debugger te motiva a mirar los pequeños detalles porque podés mirar los específicos valores de una variable, eso es lo que hace más fácil de encontrar errores lógicos.</description>
    </item>
    <item>
      <title>Cargar texto de archivo a un array de arrays</title>
      <link>https://imlauera.github.io/cargar_archivo_texto_a_buffer/</link>
      <pubDate>Fri, 07 Feb 2025 21:08:05 -0300</pubDate>
      <guid>https://imlauera.github.io/cargar_archivo_texto_a_buffer/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;errno.h&amp;gt; int main(){ FILE *f = fopen(&amp;#34;/tmp/asdf&amp;#34;,&amp;#34;r+&amp;#34;); if (f == NULL){ fprintf(stderr, &amp;#34;Error al abrir el archivo: %d.\n&amp;#34;, errno); printf(&amp;#34;%s\n&amp;#34;,strerror(errno)); return -1; } char *palabra = malloc(sizeof(char)*20); int cantidad_palabras = 0; char **words = malloc(sizeof(char*)); while ( fscanf(f, &amp;#34;%20s&amp;#34;, palabra) == 1 ){ words[cantidad_palabras] = malloc(sizeof(char)*20); strncpy(words[cantidad_palabras], palabra,20); cantidad_palabras++; words = realloc(words,(cantidad_palabras+1)*sizeof(char*)); } printf(&amp;#34;Ahora todas las palabras han sido cargadas a un arreglo de un arreglo\n&amp;#34;); for (int i = 0; i &amp;lt; cantidad_palabras; i++){ printf(&amp;#34;%s &amp;#34;,words[i]); } return 0; } </description>
    </item>
    <item>
      <title>Cómo usar errno en C</title>
      <link>https://imlauera.github.io/como_usar_errno_c/</link>
      <pubDate>Thu, 06 Feb 2025 23:48:17 -0300</pubDate>
      <guid>https://imlauera.github.io/como_usar_errno_c/</guid>
      <description>#include &amp;lt;errno.h&amp;gt; #include &amp;lt;string.h&amp;gt; /* ... */ if(read(fd, buf, 1)==-1) { printf(&amp;#34;Oh dear, something went wrong with read()! %s\n&amp;#34;, strerror(errno)); } </description>
    </item>
    <item>
      <title>Ejercicios para aprender C</title>
      <link>https://imlauera.github.io/ejercicios_aprender_c/</link>
      <pubDate>Wed, 05 Feb 2025 00:31:58 -0300</pubDate>
      <guid>https://imlauera.github.io/ejercicios_aprender_c/</guid>
      <description>https://leetcode.org https://hackerrank.com están lleno de ejercicios.&#xA;Acá una lista:&#xA;Find the Minimum Number in an Array Find the Maximum Number in an Array Count the Occurrences of a Value in an Array Reverse An Array Check If A String Is A Palindrome Sum the Values in an Array Compute the Average of an Array Convert Celsius to Fahrenheit Computing the Fibonacci Sequence Counting the Vowels in a String String append (i.</description>
    </item>
    <item>
      <title>Mezclar dos arreglos</title>
      <link>https://imlauera.github.io/mezclar_dos_arreglos/</link>
      <pubDate>Sun, 02 Feb 2025 20:53:13 -0300</pubDate>
      <guid>https://imlauera.github.io/mezclar_dos_arreglos/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; typedef struct { size_t len; int *array; }size_array; int main(){ size_array arr1 = { 20, NULL }; arr1.array = malloc(arr1.len*sizeof(*arr1.array)); size_array arr2 = { 10, NULL }; arr2.array = malloc(arr2.len*sizeof(*arr2.array)); for (int i = 0; i &amp;lt; arr1.len; i++){ arr1.array[i] = i+4; } printf(&amp;#34;Array 1:&amp;#34;); for (int i = 0; i &amp;lt; arr1.len; i++){ if (i == arr1.len-1) printf(&amp;#34;%d&amp;#34;, arr1.array[i]); else printf(&amp;#34;%d,&amp;#34;, arr1.array[i]); } printf(&amp;#34;\n&amp;#34;); for (int i = 0; i &amp;lt; arr2.</description>
    </item>
    <item>
      <title>Sizeof(int) vs sizeof *var</title>
      <link>https://imlauera.github.io/sizeofint_vs_sizeofvar/</link>
      <pubDate>Sun, 02 Feb 2025 20:22:06 -0300</pubDate>
      <guid>https://imlauera.github.io/sizeofint_vs_sizeofvar/</guid>
      <description>Un profesor me dijo que no debería usar.&#xA;int *array = malloc(sizeof *array * length); And that it should instead be:&#xA;int *array = malloc(length * sizeof(int)); Both are valid, but many veteran programmers will prefer the way you did it.&#xA;The advantage of using sizeof *array as opposed to sizeof(int) is that if you happen to change the type of array then you don&amp;rsquo;t need to change how you do the allocation.</description>
    </item>
    <item>
      <title>C: Rotar array derecha</title>
      <link>https://imlauera.github.io/rotar_array_derecha/</link>
      <pubDate>Sun, 02 Feb 2025 19:56:29 -0300</pubDate>
      <guid>https://imlauera.github.io/rotar_array_derecha/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; struct myarray { size_t len; int *array; }; int main(){ struct myarray arr = { 4, NULL }; arr.array = (int*)malloc(arr.len*sizeof(arr.array)); int movimientos; printf(&amp;#34;Cuantos movimientos querés rotar hacia la derecha?: &amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;movimientos); for (int i = 0; i &amp;lt; arr.len; i++){ arr.array[i] = i+1; } for (int i = 0; i &amp;lt; movimientos; i++){ struct myarray arr2 = { arr.len , NULL }; // Armo un nuevo array con los 3 elementos menos exceptuando el primero // y el último elemento será el primero.</description>
    </item>
    <item>
      <title>Rotar array a la izquierda</title>
      <link>https://imlauera.github.io/rotar_array_izquierda/</link>
      <pubDate>Sat, 01 Feb 2025 22:11:37 -0300</pubDate>
      <guid>https://imlauera.github.io/rotar_array_izquierda/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; struct array_len { size_t len; int *array; }; int main(){ struct array_len arr = { 4, NULL }; arr.array = (int*)malloc(arr.len*sizeof(int)); printf(&amp;#34;Longitud del array: %d\n&amp;#34;,arr.len); for (int i = 0; i &amp;lt; arr.len; i++){ arr.array[i] = i+1; } printf(&amp;#34;Rotar a la izquierda\n&amp;#34;); printf(&amp;#34;Cuantos movimientos hacia la izquierda desea rotar:&amp;#34;); int movimientos; scanf(&amp;#34;%d&amp;#34;,&amp;amp;movimientos); for (int i = 0; i &amp;lt; movimientos; i++){ int *array2 = malloc(arr.len*sizeof(int)); for (int j = 1; j &amp;lt; arr.</description>
    </item>
    <item>
      <title>Sizeof: no puede usarse para determinar longitud de un arreglo declarado con malloc</title>
      <link>https://imlauera.github.io/sizeof_memoria_dinamica/</link>
      <pubDate>Sat, 01 Feb 2025 20:32:49 -0300</pubDate>
      <guid>https://imlauera.github.io/sizeof_memoria_dinamica/</guid>
      <description>Sizeof cannot be used on dynamically allocated memory.&#xA;You cannot use SIZEOF_ARRAY to tell you the size of an array you created using malloc. You&amp;rsquo;re getting a size of one because your macro is using the size of the pointer to the &amp;ldquo;mallocated&amp;rdquo; memory to calculate its result. The pointer is two bytes, as is sizeof int, so 2/2 gives one.&#xA;struct remember_the_size { size_t len; int * arr; }; int main() { struct remember_the_size a = { 10, NULL }; a.</description>
    </item>
    <item>
      <title>Arbolito de estrellas en C</title>
      <link>https://imlauera.github.io/arbolito_de_estrellas_en_c/</link>
      <pubDate>Thu, 30 Jan 2025 15:48:50 -0300</pubDate>
      <guid>https://imlauera.github.io/arbolito_de_estrellas_en_c/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; int main(){ int filas; printf(&amp;#34;Ingrese número de filas (mínimo 3): &amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;filas); if (filas &amp;lt; 3) { fprintf(stderr,&amp;#34;Te dije que el número de filas no puede ser menor que 3\n&amp;#34;); return(-1); } int espacios = filas; for (int i = 0; i &amp;lt; filas; i++){ for (int espacios = filas-i-1; espacios &amp;gt; 0; espacios--){ printf(&amp;#34; &amp;#34;); } for (int z = 0; z &amp;lt;= i*2; z++) printf(&amp;#34;*&amp;#34;); printf(&amp;#34;\n&amp;#34;); } return 0; } </description>
    </item>
    <item>
      <title>Consultas MySQL en C y un simple servidor web</title>
      <link>https://imlauera.github.io/post/c_mysql/</link>
      <pubDate>Thu, 03 Oct 2024 12:19:50 -0300</pubDate>
      <guid>https://imlauera.github.io/post/c_mysql/</guid>
      <description>Para entender por qué se usan lenguajes de alto nivel aprender primero a entender todos los problemas que trae programar en un lenguaje de bajo nivel.&#xA;Hay que aprender lenguaje ensamblador para saber por qué existe C, hay que aprender C para entender por qué existe C++, rust, python, php, etc. y cuales son los problemas que estos lenguajes intentan solucionar.&#xA;https://www.youtube.com/watch?v=jACHG6tZakw&#xA;https://www.ucl.ac.uk/isd/services/websites-apps/databases/mysql/calling-mysql-c&#xA;https://github.com/bloominstituteoftechnology/C-Web-Server&#xA;Archivo mysql.c: // sudo apt install -y libmariadb-dev-compat libmariadb-dev // Compile: gcc -o mysql-test mysql.</description>
    </item>
    <item>
      <title>Gui gtk en C</title>
      <link>https://imlauera.github.io/post/gui_gtk_in_c/</link>
      <pubDate>Wed, 18 Sep 2024 10:23:19 -0300</pubDate>
      <guid>https://imlauera.github.io/post/gui_gtk_in_c/</guid>
      <description>sudo apt-get install libgtk2.0-dev pkg-config --list-all|grep gtk // COMPILE (GTK2): gcc main.c -o main `pkg-config --cflags gtk+-2.0` `pkg-config --libs gtk+-2.0` // COMPILE (GTK3): gcc main.c -o main `pkg-config --cflags gtk+-3.0` `pkg-config --libs gtk+-3.0` #include &amp;lt;gtk/gtk.h&amp;gt; static int counter = 0; void greet(GtkWidget* widget, gpointer data) { // printf equivalent in GTK+ g_print(&amp;#34;Welcome to GTK\n&amp;#34;); g_print(&amp;#34;%s clicked %d times\n&amp;#34;, (char*)data, ++counter); } void destroy(GtkWidget* widget, gpointer data) { gtk_main_quit(); } int main(int argc, char* argv[]) { GtkWidget* window; GtkWidget* button; gtk_init(&amp;amp;argc, &amp;amp;argv); window = gtk_window_new(GTK_WINDOW_TOPLEVEL); g_signal_connect(window, &amp;#34;destroy&amp;#34;, G_CALLBACK(destroy), NULL); /* Let&amp;#39;s set the border width of the window to 20.</description>
    </item>
    <item>
      <title>Enviar una simple consulta HTTP usando curl en C</title>
      <link>https://imlauera.github.io/post/send_http_request_using_curl/</link>
      <pubDate>Mon, 16 Sep 2024 08:12:49 -0300</pubDate>
      <guid>https://imlauera.github.io/post/send_http_request_using_curl/</guid>
      <description>// Compile: gcc curlcurl.c -o curlcurl -lcurl #include &amp;lt;curl/curl.h&amp;gt; CURL *curl = curl_easy_init(); curl_easy_setopt(curl, CURLOPT_URL, &amp;#34;https://imlauera.github.io/index.xml&amp;#34;); curl_easy_perform(curl); https://curl.se/libcurl/c/example.html https://curl.se/libcurl/c/simple.html</description>
    </item>
    <item>
      <title>Algoritmos y estructura de datos en C</title>
      <link>https://imlauera.github.io/post/algoritmos_y_estructura_de_datos_en_c/</link>
      <pubDate>Mon, 15 Jul 2024 23:37:47 -0300</pubDate>
      <guid>https://imlauera.github.io/post/algoritmos_y_estructura_de_datos_en_c/</guid>
      <description>/EDyA.zip</description>
    </item>
    <item>
      <title>Everything you need to know about pointers</title>
      <link>https://imlauera.github.io/post/everything_you_need_to_know_about_pointers/</link>
      <pubDate>Tue, 10 Oct 2023 16:23:49 -0300</pubDate>
      <guid>https://imlauera.github.io/post/everything_you_need_to_know_about_pointers/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; struct { int ancho; int alto; } typedef Rectangulo; struct queseyo{ char nombre[256]; char apellido[256]; char fecha_nacimiento[256]; int dni; } ; /*&#x9;Esto define una estructura Rectangulo **&#x9;struct { **&#x9;int ancho; **&#x9;int alto; **&#x9;} Rectangulo; ** */ int main(){ struct queseyo agenda; Rectangulo abc; Rectangulo prueba1; prueba1.ancho = 10; prueba1.alto = 20; printf(&amp;#34;ancho: %d, alto: %d\n&amp;#34;,prueba1.ancho,prueba1.alto); char * pointer_to_readonly_memory_string = &amp;#34;asdf&amp;#34;; //char pointer_to_memory_on_the_stack = malloc(sizeof(char)*5); char pointer_to_memory_on_the_stack[] = &amp;#34;asdf&amp;#34;; // pointer_to_readonly_memory_string[0] = &amp;#39;b&amp;#39;; // segmentation fault pointer_to_memory_on_the_stack[0] = &amp;#39;b&amp;#39;; printf(&amp;#34; pointer_to_readonly_memory_string: %s\n&amp;#34;, pointer_to_readonly_memory_string); printf(&amp;#34; pointer_to_memory_on_the_stack: %s\n&amp;#34;, pointer_to_memory_on_the_stack); // *pointer = *(pointer+0) = pointer[0] // Equivalentes int *pointer = malloc(sizeof(int)*4); // int *pointer1 = malloc(sizeof(*pointer1)*4); // int pointer2[4]; *pointer = 1; *(pointer+1) = 2; pointer[2]=3; *(pointer+3) = 4; *(pointer+4) = 5; for (int i=0; i&amp;lt;4; i++){ pointer[i]=i; } // malloc te crea en la memoria un espacio de 5 caracteres //char *hola = malloc(sizeof(char)*5); char *hola = malloc(sizeof(*hola)*5); // Todas estas expresiones son equivalentes *hola = &amp;#39;h&amp;#39;; hola[0] = &amp;#39;h&amp;#39;; *(hola+0) = &amp;#39;h&amp;#39;; *(hola+1) = &amp;#39;o&amp;#39;; *(hola+2) = &amp;#39;l&amp;#39;; *(hola+3) = &amp;#39;a&amp;#39;; *(hola+4) = &amp;#39;\0&amp;#39;; sprintf(hola,&amp;#34;%s&amp;#34;,&amp;#34;chau&amp;#34;); for (int i=0; i&amp;lt;4; i++){ printf(&amp;#34;pointer: %d\n&amp;#34;,pointer[i]); } printf(&amp;#34;pointer: %s\n&amp;#34;,hola); free(pointer); free(hola); return 0; } Invertir una lista enlazada https://www.</description>
    </item>
    <item>
      <title>Error de Segmentación (Segmentation Fault) en C</title>
      <link>https://imlauera.github.io/post/segmentation_fault_in_c/</link>
      <pubDate>Thu, 05 Oct 2023 05:22:12 -0300</pubDate>
      <guid>https://imlauera.github.io/post/segmentation_fault_in_c/</guid>
      <description>Escenarios comunes de fallas de segmentación En una falla de segmentación, un programa intenta acceder a una memoria a la que no está autorizado o que no existe. Algunos escenarios comunes que pueden causar fallas de segmentación son:&#xA;Modificar una cadena de solo lectura Acceder a una dirección que está liberada Acceder a límites de índice fuera de la matriz Uso inadecuado de scanf() Desbordamiento de pila Desreferenciación de puntero no inicializado 1.</description>
    </item>
    <item>
      <title>Aprendiendo punteros en C</title>
      <link>https://imlauera.github.io/post/aprendiendo_c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://imlauera.github.io/post/aprendiendo_c/</guid>
      <description>Ejemplo #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; char *printLocalTime() { char *timeStringBuff=malloc(30); //50 chars should be enough //char timeStringBuff[100]; //50 chars should be enough char *mic = &amp;#34;2022&amp;#34;; char c = &amp;#39;m&amp;#39;; int test = 1; char prueba[50]; char *prueba_m = malloc(50); printf(&amp;#34;%d\n&amp;#34;,sizeof(prueba)); printf(&amp;#34;%d\n&amp;#34;,sizeof(prueba_m)); sprintf(timeStringBuff, &amp;#34;they tried everything %s %d\n&amp;#34;,mic,test); //Optional: Construct String object // Esto retorna un puntero a la direccion de memoria en donde esta timeStringBuff // *timeStringBuff = timeStringBuff[0] // *(timeStringBuff+3) = timeStringBuff[3] printf(&amp;#34;%s\n&amp;#34;,timeStringBuff); // Vos no retornas la palabra cuando ejecutas return timeStringBufff retornas un puntero // que apunta a la primer letra del char.</description>
    </item>
  </channel>
</rss>
