<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ricardo on Imlauer</title>
    <link>https://imlauera.github.io/tags/ricardo/</link>
    <description>Recent content in Ricardo on Imlauer</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Tue, 03 Sep 2024 20:02:06 -0300</lastBuildDate>
    <atom:link href="https://imlauera.github.io/tags/ricardo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C y reversing</title>
      <link>https://imlauera.github.io/post/c_y_reversing1/</link>
      <pubDate>Tue, 03 Sep 2024 20:02:06 -0300</pubDate>
      <guid>https://imlauera.github.io/post/c_y_reversing1/</guid>
      <description>Reverseamos un hola mundo.&#xA;#include &amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;#34;Hola Mundo\n&amp;#34;); return 0; } Aquí vemos que el compilador modifico nuestro main haciéndolo una función de tres argumentos que no son nuestros, sino del compilador, y tiene una variable. var_4 que creo el compilador la cual si hacemos las cuentas devolverá siempre 10 y la utilizara el compilador al cerrar el programa, por supuesto nada de esto es código propio, vayamos a nuestro código, propiamente dicho.</description>
    </item>
    <item>
      <title>Ricardo Narvaja (Exámen 22)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_22/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:47 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_22/</guid>
      <description>Este exámen tiene demasiado código como para pegarlo acá.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 17 (Servidor, zlib.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_17/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_17/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al char v8; // [esp+0h] [ebp-12E0h] char v9; // [esp+0h] [ebp-12E0h] char v10; // [esp+0h] [ebp-12E0h] char v11; // [esp+0h] [ebp-12E0h] char v12[4096]; // [esp+8h] [ebp-12D8h] BYREF char v13[400]; // [esp+1008h] [ebp-2D8h] BYREF char Format[200]; // [esp+1198h] [ebp-148h] BYREF char v15[64]; // [esp+1260h] [ebp-80h] BYREF char v16[16]; // [esp+12A0h] [ebp-40h] BYREF __int16 v17[2]; // [esp+12B0h] [ebp-30h] BYREF int v18; // [esp+12B4h] [ebp-2Ch] int v19; // [esp+12C0h] [ebp-20h] int v20; // [esp+12C4h] [ebp-1Ch] BYREF char v21[4]; // [esp+12C8h] [ebp-18h] char v22[4]; // [esp+12CCh] [ebp-14h] int v23; // [esp+12D0h] [ebp-10h] int i; // [esp+12D4h] [ebp-Ch] int v25; // [esp+12D8h] [ebp-8h] char v26; // [esp+12DFh] [ebp-1h] strcpy(v15, &amp;#34;Hello Client , I have received your connection your key is %d.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 18 (Servidor, libw32pth-0.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_18/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_18/</guid>
      <description>int sub_4014E0(char *Buffer, char *Format, ...) { va_list va; // [esp+18h] [ebp+10h] BYREF va_start(va, Format); sub_401010(); return sub_401450(Buffer, Format, 0, va); } int __cdecl sub_401020(int a1) { char v1; // al char v3; // al char v4; // al char v5; // al size_t v6; // eax char v7; // [esp+0h] [ebp-12DCh] char v8; // [esp+0h] [ebp-12DCh] char v9; // [esp+0h] [ebp-12DCh] char v10; // [esp+0h] [ebp-12DCh] char v11[4096]; // [esp+8h] [ebp-12D4h] BYREF char v12[400]; // [esp+1008h] [ebp-2D4h] BYREF char Format[64]; // [esp+1198h] [ebp-144h] BYREF char Str[200]; // [esp+11D8h] [ebp-104h] BYREF char v15[16]; // [esp+12A0h] [ebp-3Ch] BYREF __int16 v16[2]; // [esp+12B0h] [ebp-2Ch] BYREF int v17; // [esp+12B4h] [ebp-28h] int v18; // [esp+12C0h] [ebp-1Ch] int v19; // [esp+12C4h] [ebp-18h] BYREF char v20[4]; // [esp+12C8h] [ebp-14h] int i; // [esp+12CCh] [ebp-10h] int v22; // [esp+12D0h] [ebp-Ch] int v23; // [esp+12D4h] [ebp-8h] char v24; // [esp+12DBh] [ebp-1h] strcpy(Format, &amp;#34;Hello Client , I have received your connection your key is %d.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 19 (Servidor, WCMZIP32.DLL)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_19/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_19/</guid>
      <description>_DWORD *__thiscall sub_401020(_DWORD *this) { sub_4010C0(this); *this = off_403348; this[2] = 0; this[113] = 0; this[114] = 0; *((_BYTE *)this + 4756) = 0; memset(this + 115, 0, 0xC8u); memset(this + 165, 0, 0x1000u); memset((char *)this + 4757, 0, 0xC8u); return this; } _DWORD *__thiscall sub_401650(_DWORD *this, int a2) { _DWORD *result; // eax result = this; this[2] = a2; return result; } int __thiscall sub_4010E0(char *this) { char v1; // al char v2; // al size_t v3; // eax sub_4014D0(this); *((_DWORD *)this + 104) = WS2_32_1(*((_DWORD *)this + 103), this + 436, this + 452); if ( *((_DWORD *)this + 104) == -1 ) { v1 = WS2_32_111(); sub_4017F0(&amp;#34;accept failed with error code : %d&amp;#34;, v1); } puts(&amp;#34;Connection accepted\n&amp;#34;); memset(this + 4757, 0, 0xC8u); sub_4017F0(&amp;#34;number= %d\n&amp;#34;, *((_DWORD *)this + 2)); v2 = sub_401490(8888); sub_401830(this + 4757, &amp;#34;Nuevo Port is = %d\n&amp;#34;, v2); WS2_32_19(*((_DWORD *)this + 104), this + 4757, 200, 0); v3 = strlen(this + 4757); WS2_32_16(*((_DWORD *)this + 104), Src, v3, 0); if ( *(_DWORD *)Src == 1094861636 ) { WS2_32_3(*((_DWORD *)this + 103)); return 1; } else { puts(&amp;#34;Bye Bye love\n&amp;#34;); return 0; } } int __thiscall sub_401240(int this) { char v1; // al char v3; // [esp+0h] [ebp-Ch] int v4; // [esp+0h] [ebp-Ch] signed int i; // [esp+4h] [ebp-8h] sub_4014D0(this); *(_DWORD *)(this + 416) = WS2_32_1(*(_DWORD *)(this + 412), this + 436, this + 452); if ( *(_DWORD *)(this + 416) == -1 ) { v1 = WS2_32_111(); sub_4017F0(&amp;#34;accept failed with error code : %d&amp;#34;, v1); } puts(&amp;#34;Connection accepted\n&amp;#34;); memset((void *)(this + 4757), 0, 0xC8u); sub_4017F0(&amp;#34;number= %d\n&amp;#34;, *(_DWORD *)(this + 8)); sub_401830((char *)(this + 4757), (char *)(this + 460), dword_404080[0]); sub_4017F0((char *)(this + 4757), v3); WS2_32_19(*(_DWORD *)(this + 416), this + 4757, 200, 0); *(_DWORD *)(this + 456) = dword_404084; WS2_32_16(*(_DWORD *)(this + 416), Src, 12288, 0); v4 = *((_DWORD *)Src + 1) + *(_DWORD *)Src; sub_4017F0(&amp;#34;%x\n\n&amp;#34;, v4); if ( v4 == -1 ) { Size = *((_DWORD *)Src + 2); dword_404078 = *((_DWORD *)Src + 3); } memcpy((void *)(this + 660), Src, Size); for ( i = 0; i &amp;lt; (int)Size; ++i ) { *(_BYTE *)(this + 4756) = *(_BYTE *)(i + this + 660); if ( *(_BYTE *)(this + 4756) == 4 ) exit(1); if ( *(_BYTE *)(this + 4756) == 65 ) exit(1); } if ( dword_404078 !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 20 (Servidor, libiconv-2.dll, iconv.dll, intl.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_20/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_20/</guid>
      <description>Hay 3 exámenes Examen a _BYTE *__cdecl sub_40ADB0(_BYTE *a1, _BYTE *a2) { _BYTE *v2; // edi _BYTE *v3; // ecx int v4; // edx int v5; // eax _BYTE *result; // eax v2 = a1; v3 = a2; if ( ((unsigned __int8)a2 &amp;amp; 3) == 0 ) { while ( 1 ) { LABEL_6: v5 = (*(_DWORD *)v3 + 2130640639) ^ ~*(_DWORD *)v3; v4 = *(_DWORD *)v3; v3 += 4; if ( (v5 &amp;amp; 0x81010100) !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 21 (Ejecutar la calculadora, con base de datos:ConsoleApplication4.pdb)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_21/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_21/</guid>
      <description>int __thiscall sub_401050(_DWORD *this, int a2, int a3, int *a4, int *a5) { int v6[256]; // [esp+0h] [ebp-404h] BYREF _DWORD *v7; // [esp+400h] [ebp-4h] v7 = this; sub_401010(this, a2, a3, a4, a5); *v7 = &amp;amp;off_41A348; a2 = 0; a3 = 0; a4 = &amp;amp;a2; a5 = &amp;amp;a3; *(v7 + 1024) = 0; *(v7 + 1025) = 0; *(v7 + 1026) = 0; sub_401010(v6, a2, a3, a4, a5); return v7; } _DWORD *__thiscall sub_401010(_DWORD *this, int a2, int a3, int a4, int a5) { *this = &amp;amp;off_41A33C; this[2] = a2; this[3] = a3; this[5] = a5; this[4] = a4; return this; } LPVOID __cdecl sub_40C2D8(SIZE_T dwBytes) { SIZE_T v1; // esi LPVOID result; // eax v1 = dwBytes; if ( dwBytes &amp;gt; 0xFFFFFFE0 ) { LABEL_8: *(_DWORD *)sub_40CBC6() = 12; return 0; } else { if ( !</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 23 (kernel32.dll) 64 bits</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_23/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:39 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_23/</guid>
      <description>int __fastcall main(int argc, const char **argv, const char **envp) { FILE *v3; // rax int v4; // ebx char Buffer[4]; // [rsp+20h] [rbp-E8h] BYREF qword_140003628 = GetModuleHandleA(&amp;#34;kernel32.dll&amp;#34;); while ( 1 ) { Stream = fopen(&amp;#34;fichero.dat&amp;#34;, &amp;#34;a+&amp;#34;); if ( !Stream ) break; v3 = _acrt_iob_func(0); fgets(Buffer, 450, v3); fwrite(Buffer, 1uLL, 450uLL, Stream); v4 = *Buffer; fclose(Stream); if ( v4 == 0x41424344 ) return 0; } perror(&amp;#34;No se puede escribir fichero.dat&amp;#34;); printf(&amp;#34;%x&amp;#34;); return -1; } </description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 16 (Servidor, MObexDll.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_16/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:38 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_16/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al char v8; // [esp+0h] [ebp-12D0h] char v9; // [esp+0h] [ebp-12D0h] char v10; // [esp+0h] [ebp-12D0h] char v11[4096]; // [esp+8h] [ebp-12C8h] BYREF char v12[400]; // [esp+1008h] [ebp-2C8h] BYREF char Destination[200]; // [esp+1198h] [ebp-138h] BYREF char Source[52]; // [esp+1260h] [ebp-70h] BYREF char v15[16]; // [esp+1294h] [ebp-3Ch] BYREF __int16 v16[2]; // [esp+12A4h] [ebp-2Ch] BYREF int v17; // [esp+12A8h] [ebp-28h] int v18; // [esp+12B4h] [ebp-1Ch] int v19; // [esp+12B8h] [ebp-18h] BYREF char v20[4]; // [esp+12BCh] [ebp-14h] int v21; // [esp+12C0h] [ebp-10h] int i; // [esp+12C4h] [ebp-Ch] int v23; // [esp+12C8h] [ebp-8h] strcpy(Source, &amp;#34;Hello Client , I have received your connection.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 15 (Servidor, MObexDll.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_15/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:36 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_15/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al size_t v8; // eax char v9[4096]; // [esp+0h] [ebp-11D8h] BYREF char v10[400]; // [esp+1000h] [ebp-1D8h] BYREF char v11[16]; // [esp+1190h] [ebp-48h] BYREF __int16 v12[2]; // [esp+11A0h] [ebp-38h] BYREF int v13; // [esp+11A4h] [ebp-34h] int v14; // [esp+11B0h] [ebp-28h] int v15; // [esp+11B4h] [ebp-24h] BYREF size_t Size; // [esp+11B8h] [ebp-20h] char v17[4]; // [esp+11BCh] [ebp-1Ch] char *Str; // [esp+11C0h] [ebp-18h] int v19; // [esp+11C4h] [ebp-14h] int i; // [esp+11C8h] [ebp-10h] int v21; // [esp+11CCh] [ebp-Ch] void *Src; // [esp+11D4h] [ebp-4h] Size = 4096; Src = malloc(0x2000u); LoadLibraryA(&amp;#34;MObexDll.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 14 (Servidor, helixprodctrl.dll)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_14/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:34 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_14/</guid>
      <description>int __cdecl main(int argc, const char **argv, const char **envp) { char v3; // al char v5; // al char v6; // al char v7; // al size_t v8; // eax char v9[400]; // [esp+0h] [ebp-28Ch] BYREF char v10[200]; // [esp+190h] [ebp-FCh] BYREF char v11[16]; // [esp+258h] [ebp-34h] BYREF __int16 v12[2]; // [esp+268h] [ebp-24h] BYREF int v13; // [esp+26Ch] [ebp-20h] int v14; // [esp+278h] [ebp-14h] int v15[2]; // [esp+27Ch] [ebp-10h] BYREF int v16; // [esp+284h] [ebp-8h] int v17; // [esp+288h] [ebp-4h] LoadLibraryA(&amp;#34;helixprodctrl.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Exámen 13 (Ejecutar calculadora)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_13/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:32 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_13/</guid>
      <description>_DWORD *__thiscall this_50(_DWORD *this) { this[50] = &amp;#34;A ejecutar la calculadora de nuevo...\n&amp;#34;; return this; } int __cdecl sub_401040(int a1, int a2, char *FileName) { FILE *Stream; // [esp+0h] [ebp-4h] Stream = fopen(FileName, &amp;#34;rb&amp;#34;); fread(FileName + 204, 300u, 1u, Stream); printf(&amp;#34;Salida %s\n&amp;#34;, a2); dword_403020 = dword_403024 + *(FileName + 102); (dword_403020)(a2); return 0; } int __cdecl main(int argc, const char **argv, const char **envp) { char Buffer[200]; // [esp+0h] [ebp-268h] BYREF char Destination[404]; // [esp+C8h] [ebp-1A0h] BYREF FILE *Stream; // [esp+25Ch] [ebp-Ch] int (__cdecl *v7)(char *, char); // [esp+260h] [ebp-8h] char v8[4]; // [esp+264h] [ebp-4h] if ( argc &amp;lt; 2 ) { printf(&amp;#34;bye: \n&amp;#34;, Buffer[0]); exit(1); } this_50(Destination); v7 = (&amp;amp;system + 110); dword_403024 = &amp;amp;system + 110; memset(Destination, 0, 0xC8u); memset(&amp;amp;Destination[204], 0, 0xC8u); memset(Buffer, 0, sizeof(Buffer)); strcpy(Destination, argv[1]); Stream = fopen(Destination, &amp;#34;r&amp;#34;); if ( !</description>
    </item>
    <item>
      <title>Ricardo narvaja: Exámen 12 (Ejecutar calculadora)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_12/</link>
      <pubDate>Tue, 27 Aug 2024 14:54:22 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_12/</guid>
      <description>Este tiene bufferoverflow en el nombre del archivo. Tenés que crear un archivo con un nombre muy largo y desborda y pisa el EIP. Ejemplo:&#xA;└─$ wine ConsoleApplication11.exe AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAA wine: Unhandled page fault on read access to 41414141 at address 7B3630C6 (thread 00 24), starting debugger... Unhandled exception: page fault on read access to 0x41414141 in wow64 32-bit code (0 x7b3630c6). 0114:err:dbghelp_msc:pe_load_debug_directory Got a page fault while loading symbols winedbg: Internal crash at 7AC68CF4 Lo que me decompila el IDA:</description>
    </item>
    <item>
      <title>Reversing: Exámen 11 (Ricardo Narvaja)</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_11/</link>
      <pubDate>Tue, 27 Aug 2024 01:56:28 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_11/</guid>
      <description>Los retos los hice usando vim con la siguiente configuracion:&#xA;&amp;#34; vim -b : edit binary using xxd-format! augroup Binary au! au BufReadPre *.bin let &amp;amp;bin=1 au BufReadPost *.bin if &amp;amp;bin | %!xxd au BufReadPost *.bin set ft=xxd | endif au BufWritePre *.bin if &amp;amp;bin | %!xxd -r au BufWritePre *.bin endif au BufWritePost *.bin if &amp;amp;bin | %!xxd au BufWritePost *.bin set nomod | endif augroup END autocmd BufWritePost *.</description>
    </item>
    <item>
      <title>Ricardo Narvaja: Examen 10 (Ejecutar calculadora no es un bufferoverflow)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_10/</link>
      <pubDate>Mon, 26 Aug 2024 15:52:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_10/</guid>
      <description>No me funcionaba con wine en linux porque verifica si argc == 2 y si ejecutás wine EXAMEN_10.exe 49 el argc vale 3, así que tuve que ejecutar el exploit en windows. En linux en vez de usar calc uso cmd porque calc no está disponible a nivel global.&#xA;El código que me generó el ida con algunas modificaciones&#xA;_DWORD *__thiscall this_106(_DWORD *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Ricardo Narvaja Reversing: Buffer overflow examen 9</title>
      <link>https://imlauera.github.io/post/buffer_overflow_9/</link>
      <pubDate>Sat, 24 Aug 2024 05:09:01 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_9/</guid>
      <description>Este reto usa vfprintf #include &amp;lt;stdarg.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; void vout(FILE *stream, char *fmt, ...); char fmt1 [] = &amp;#34;%s %s %s\n&amp;#34;; int main(void) { FILE *stream; stream = fopen(&amp;#34;myfile.dat&amp;#34;, &amp;#34;w&amp;#34;); vout(stream, fmt1, &amp;#34;Sat&amp;#34;, &amp;#34;Sun&amp;#34;, &amp;#34;Mon&amp;#34;); } void vout(FILE *stream, char *fmt, ...) { va_list arg_ptr; va_start(arg_ptr, fmt); vfprintf(stream, fmt, arg_ptr); va_end(arg_ptr); } printf que me decompilo el ida:&#xA;int printf(char *Format, ...) { FILE *v1; // eax va_list va; // [esp+14h] [ebp+Ch] BYREF va_start(va, Format); sub_401000(); v1 = _acrt_iob_func(1u); return vfprintf(v1, Format, 0, va); } Esto me generó el IDA con algunos retoques: // Overfloodea cuando cargo el caracter 169 char *this_106(char *this) { this[106] = &amp;#34;A ejecutar la calculadora de nuevo.</description>
    </item>
    <item>
      <title>Buffer overflow 7 (Ricardo navarja reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_7/</link>
      <pubDate>Tue, 20 Aug 2024 23:49:30 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_7/</guid>
      <description>Este es el código que me generó el IDA con mis modificaciones:&#xA;int __cdecl check(char *Stream) { char savedregs; // [esp+0h] [ebp+0h] sprintf(Stream + 220, &amp;#34;Bieeeeeeeeeeeeeeeeeeeen ? con %s&amp;#34;, Stream + 4); if ( *(Stream + 52) != &amp;#39;E&amp;#39; ) { printf(&amp;#34;Mal camino \n&amp;#34;, savedregs); exit(1); } if ( Stream[216] != 0xD ) *(Stream + 54) = 2; printf(&amp;#34;valor= %x\n&amp;#34;, Stream[216]); printf(&amp;#34;number= %x\n&amp;#34;, Stream[204]); if ( *(Stream + 53) == &amp;#39;F&amp;#39; ) printf(&amp;#34;Aprobaste level 7&amp;#34;, savedregs); else printf(&amp;#34;Que pasa, %x \n&amp;#34;, Stream[216] + Stream[204]); return 0; } int main(int argc, const char **argv) { FILE *Stream; // [esp+0h] [ebp-1A4h] BYREF char Buffer[200]; // [esp+4h] [ebp-1A0h] BYREF int v6; // [esp+CCh] [ebp-D8h] int v7; // [esp+D0h] [ebp-D4h] int v8; // [esp+D4h] [ebp-D0h] char Destination[200]; // [esp+DCh] [ebp-C8h] BYREF v6 = 1; v8 = 1; v7 = 69; memset(Buffer, 0, sizeof(Buffer)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Buffer Overflow Examen 6 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/buffer_overflow_6/</link>
      <pubDate>Tue, 20 Aug 2024 18:04:05 -0300</pubDate>
      <guid>https://imlauera.github.io/post/buffer_overflow_6/</guid>
      <description>El IDA me lo decompila a :&#xA;void *check(void *this) { this[102] = 0; this[104] = &amp;#34;Aprobaste level 6&amp;#34;; this[105] = &amp;#34;A practicar y repasar mas ...&amp;#34;; return this; } int check3(char *Destination) { // Concatenación. strcat(Destination, Destination[105]); if ( strlen(Destination) == 229 ) { if ( Destination[4] == 0x49 ) Destination[50] = 1; if ( Destination[5] != 0x50 ) Destination[50] = 0; } return 0; } int check2(char *Destination) { check3(Destination); if ( Destination[50] == 1 ) printf(&amp;#34;%s\n&amp;#34;, Destination[104]); else printf(&amp;#34;%s\n&amp;#34;, Destination[105]); return 0; } int __cdecl main(int argc, const char **argv, const char **envp) { char Destination[200]; // [esp+0h] [ebp-1A8h] BYREF int v5; // [esp+C8h] [ebp-E0h] BYREF FILE *Stream; // [esp+CCh] [ebp-DCh] char Buffer[200]; // [esp+D0h] [ebp-D8h] BYREF int *puntero_a_v5; // [esp+19Ch] [ebp-Ch] check(Destination); v5 = 0; puntero_a_v5 = &amp;amp;v5; memset(Buffer, 0, 200*sizeof(char)); memset(Destination, 0, sizeof(Destination)); Stream = fopen(&amp;#34;example.</description>
    </item>
    <item>
      <title>Explicación de todos los exámenes de buffer overflow de Ricardo Narvaja Reversing</title>
      <link>https://imlauera.github.io/post/ricardo_narvaja_cracking/</link>
      <pubDate>Thu, 08 Aug 2024 06:01:01 -0300</pubDate>
      <guid>https://imlauera.github.io/post/ricardo_narvaja_cracking/</guid>
      <description>Todos sus videos consisten en explotar diferentes tipos de buffer overflows en programas 32 bits, y me parece que a veces se enfoca demasiado en la utilización de la herramienta IDA en lugar de explicar primero lo más importante que es: ¿por qué la aplicación es vulnerable a esos ataques? Si se entiende eso, se tiene una mejor intuición de como funciona. Estoy hablando específicamente de los cursos que tiene en su canal Ricardo Narvaja.</description>
    </item>
    <item>
      <title>Buffer overflow exámen 5 (Ricardo Narvaja Reversing)</title>
      <link>https://imlauera.github.io/post/bufferoverflow_5/</link>
      <pubDate>Wed, 07 Aug 2024 18:31:16 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_5/</guid>
      <description>Lo que el decompilador de IDA me generó con algunas modificaciones.&#xA;int check(char *buffer) { // Copia el buffer a partir de la posición 216 al comienzo del buffer a partir de la posición 4. // 11 caracteres insertando al buffer // 4+4+11 = 19 char savedregs; // 199 -4 + 11 sprintf(&amp;amp;buffer[4], &amp;#34;Bien ? con %s&amp;#34;, buffer + 216); // 52-19 = 33 // La posición 33 del archivo example.</description>
    </item>
    <item>
      <title>Explotando buffer overflows: copia un buffer de 200 bytes a otro del mismo tamaño pero con una string agregada.</title>
      <link>https://imlauera.github.io/post/bufferoverflow_4/</link>
      <pubDate>Wed, 07 Aug 2024 13:37:58 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_4/</guid>
      <description>El overflow se produce porque tenemos dos buffers de 200, tenemos un sprintf toma un buffer de 200 y le agrega un texto y lo guarda en el otro buffer de 200. Entonces como la otra puede ser cercana a 200 (200 menos el byte del &#39;\0&#39;), va a haber un overflow.&#xA;Una posible primer solución (no funciona en este caso) Dos buffers de 200 bytes. Llenamos el buffer con 200, strcpy copiará hasta donde encuentre un 0 y como el store de bp no puede ser 0 porque guarda el valor de bp de la función padre entonces esa dirección va a pendear(concatenar) y la va a copiar al buffer de destino y podemos producir un overflow por no poner un 0 final en la string, porque como estamos leyendo de un archivo de texto binario podemos poner cualquier byte y los 200 puede ser todas As y no necesariamente terminar en 0, entonces luego al copiarlo se copian las 200 As más cualquier cosa que haya a continuación hasta que encuentre un 0.</description>
    </item>
    <item>
      <title>Explotando buffer overflow provocado por copiar un buffer de 300 a uno de 200</title>
      <link>https://imlauera.github.io/post/bufferoverflow_3/</link>
      <pubDate>Wed, 07 Aug 2024 07:24:45 -0300</pubDate>
      <guid>https://imlauera.github.io/post/bufferoverflow_3/</guid>
      <description>Lo único que hacemos es pisar la variable que está abajo del buffer de 200 porque copia el contenido del buffer de 200 a un buffer de 300. Le ponemos de valor 0 a la variable que está debajo del buffer de 200 porque hace esta comparación cmp ptr [eax+0C8h],0 para ganar el reto. En donde 0C8h es un offset que hace referencia a una variable que está dentro de estructura en donde está también declarado el buffer.</description>
    </item>
  </channel>
</rss>
